{{- $celeryConfigSecretName := .Values.global.celeryConfigSecretName | default .Values.celeryConfigSecretName }}
{{ range $deployment := .Values.deployments }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dagster.fullname" $ -}}-{{- $deployment.name }}
  labels:
    {{- include "dagster.labels" $ | nindent 4 }}
    component: user-deployments
    deployment: {{ $deployment.name }}
    {{- with $deployment.labels }}
    {{- . | toYaml | nindent 4 }}
    {{- end }}
  annotations: {{ $deployment.annotations | toYaml | nindent 4 }}
spec:
  replicas: 1
  {{- if $deployment.deploymentStrategy }}
  strategy:
    {{- toYaml $deployment.deploymentStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dagster.selectorLabels" $ | nindent 6 }}
      component: user-deployments
      deployment: {{ $deployment.name }}
  template:
    metadata:
      labels:
        {{- include "dagster.selectorLabels" $ | nindent 8 }}
        component: user-deployments
        deployment: {{ $deployment.name }}
        {{- with $deployment.labels }}
        {{- . | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        checksum/dagster-user-deployment: {{ $deployment | toJson | sha256sum }}
        {{- with $deployment.annotations }}
        {{- range $key, $value := . }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
    spec:
      imagePullSecrets: {{ $.Values.imagePullSecrets | toYaml | nindent 8 }}
      serviceAccountName: {{ include "dagsterUserDeployments.serviceAccountName" $ }}
      automountServiceAccountToken: true
      securityContext: {{ $deployment.podSecurityContext | toYaml | nindent 8 }}
      {{- if $deployment.initContainers }}
      initContainers:
        {{- toYaml $deployment.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext: {{ $deployment.securityContext | toYaml | nindent 12 }}
          imagePullPolicy: {{ $deployment.image.pullPolicy }}
          image: {{ include "dagster.dagsterImage.name" (list $ $deployment.image) | quote }}
          {{- if $deployment.dagsterApiGrpcArgs }}
          args: ["dagster", "api", "grpc", "-h", "0.0.0.0", "-p", "{{ $deployment.port }}", "{{- join "\",\"" $deployment.dagsterApiGrpcArgs }}"]
          {{- else if $deployment.codeServerArgs }}
          args: ["dagster", "code-server", "start", "-h", "0.0.0.0", "-p", "{{ $deployment.port }}", "{{- join "\",\"" $deployment.codeServerArgs }}"]
          {{- end }}
          env:
            - name: DAGSTER_CURRENT_IMAGE
              value: {{ include "dagster.dagsterImage.name" (list $ $deployment.image) | quote }}
            - name: DAGSTER_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "dagsterUserDeployments.postgresql.secretName" $ }}
                  key: postgresql-password
            {{- $includeConfigInLaunchedRuns := $deployment.includeConfigInLaunchedRuns | default (dict "enabled" true) }}
            {{- if $includeConfigInLaunchedRuns.enabled }}
            {{- if $deployment.dagsterApiGrpcArgs }}
            # uses the auto_envvar_prefix of the dagster cli to set the --container-context arg
            # on 'dagster api grpc'
            - name: DAGSTER_CLI_API_GRPC_CONTAINER_CONTEXT
              value: {{ include "dagsterUserDeployments.k8sContainerContext" (list $ $deployment) | fromYaml | toJson | quote }}
            {{- else }}
            - name: DAGSTER_CONTAINER_CONTEXT
              value: {{ include "dagsterUserDeployments.k8sContainerContext" (list $ $deployment) | fromYaml | toJson | quote }}
            {{- end }}
            {{- end }}
            # If this is a map, we write it to a configmap. If it's a list, we include it here (can use more k8s spec like valueFrom).
            {{- if and ($deployment.env) (kindIs "slice" $deployment.env) }}
            {{- toYaml $deployment.env | nindent 12 }}
            {{- end}}
          envFrom:
            - configMapRef:
                name: {{ include "dagster.fullname" $ }}-user-deployments-shared-env
            - configMapRef:
                name: {{ include "dagster.fullname" $ }}-{{ $deployment.name }}-user-env
            {{- range $envConfigMap := $deployment.envConfigMaps }}
            - configMapRef: {{- $envConfigMap | toYaml | nindent 16 }}
            {{- end }}
            {{- range $envSecret := $deployment.envSecrets }}
            - secretRef: {{- $envSecret | toYaml | nindent 16 }}
            {{- end }}
            {{- if $celeryConfigSecretName }}
            - secretRef:
                name: {{ $celeryConfigSecretName }}
                optional: true
            {{- end }}
          resources: {{ $deployment.resources | toYaml | nindent 12 }}
        # Only disable readiness if explicitly set to false
        {{- if not $deployment.readinessProbe }}
          readinessProbe:
            exec:
              command: ["dagster", "api", "grpc-health-check", "-p", "{{ $deployment.port }}"]
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 15
        {{- else if ne $deployment.readinessProbe.enabled false }}
          {{- if not $deployment.readinessProbe.exec }}
          readinessProbe:
            exec:
              command: ["dagster", "api", "grpc-health-check", "-p", "{{ $deployment.port }}"]
            {{- if hasKey $deployment.readinessProbe "initialDelaySeconds" }}
            initialDelaySeconds:
              {{- toYaml $deployment.readinessProbe.initialDelaySeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.readinessProbe "periodSeconds" }}
            periodSeconds:
              {{- toYaml $deployment.readinessProbe.periodSeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.readinessProbe "timeoutSeconds" }}
            timeoutSeconds:
              {{- toYaml $deployment.readinessProbe.timeoutSeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.readinessProbe "successThreshold" }}
            successThreshold:
              {{- toYaml $deployment.readinessProbe.successThreshold | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.readinessProbe "failureThreshold" }}
            failureThreshold:
              {{- toYaml $deployment.readinessProbe.failureThreshold | nindent 14 }}
            {{- end }}
          {{- else}}
          readinessProbe: {{ $deployment.readinessProbe | toYaml | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if $deployment.livenessProbe }}
          {{- if not $deployment.livenessProbe.exec }}
          livenessProbe:
            exec:
              command: ["dagster", "api", "grpc-health-check", "-p", "{{ $deployment.port }}"]
            {{- if hasKey $deployment.livenessProbe "initialDelaySeconds" }}
            initialDelaySeconds:
              {{- toYaml $deployment.livenessProbe.initialDelaySeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.livenessProbe "periodSeconds" }}
            periodSeconds:
              {{- toYaml $deployment.livenessProbe.periodSeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.livenessProbe "timeoutSeconds" }}
            timeoutSeconds:
              {{- toYaml $deployment.livenessProbe.timeoutSeconds | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.livenessProbe "successThreshold" }}
            successThreshold:
              {{- toYaml $deployment.livenessProbe.successThreshold | nindent 14 }}
            {{- end }}
            {{- if hasKey $deployment.livenessProbe "failureThreshold" }}
            failureThreshold:
              {{- toYaml $deployment.livenessProbe.failureThreshold | nindent 14 }}
            {{- end }}
          {{- else}}
          livenessProbe: {{ $deployment.livenessProbe | toYaml | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if $deployment.startupProbe }}
        {{- if $deployment.startupProbe.enabled }}
          startupProbe:
          {{- $startupProbe := omit $deployment.startupProbe "enabled" }}
            {{- if $startupProbe }}
              {{- $startupProbe | toYaml | nindent 12 }}
            {{- end }}
          {{- if not $deployment.startupProbe.exec }}
            exec:
              command: ["dagster", "api", "grpc-health-check", "-p", "{{ $deployment.port }}"]
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if $deployment.volumeMounts }}
          volumeMounts:
          {{- range $volumeMount := $deployment.volumeMounts }}
            - {{- $volumeMount | toYaml | nindent 14 }}
          {{- end }}
        {{- end }}
        {{- if $deployment.sidecarContainers }}
        {{- toYaml $deployment.sidecarContainers | nindent 8 }}
        {{- end }}
      nodeSelector: {{ $deployment.nodeSelector | toYaml | nindent 8 }}
      affinity: {{ $deployment.affinity | toYaml | nindent 8 }}
      tolerations: {{- $deployment.tolerations | toYaml | nindent 8 }}
      {{- if $deployment.volumes }}
      volumes:
        {{- range $volume := $deployment.volumes }}
        - {{- $volume | toYaml | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- if $deployment.schedulerName }}
      schedulerName: {{ $deployment.schedulerName }}
      {{- end }}
---
{{ end }}
