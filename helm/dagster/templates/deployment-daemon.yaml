{{- if .Values.dagsterDaemon.enabled }}
{{- $userDeployments := index .Values "dagster-user-deployments" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dagster.fullname" $ -}}-daemon
  labels:
    {{- include "dagster.labels" $ | nindent 4 }}
    component: dagster-daemon
    deployment: daemon
    {{- with .Values.dagsterDaemon.deploymentLabels }}
    {{- . | toYaml | nindent 4 }}
    {{- end }}
  annotations:
    {{- range $key, $value := .Values.dagsterDaemon.annotations }}
    {{ $key }}: {{ $value | squote }}
    {{- end }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "dagster.selectorLabels" $ | nindent 6 }}
      component: dagster-daemon
      deployment: daemon
  template:
    metadata:
      labels:
        {{- include "dagster.selectorLabels" $ | nindent 8 }}
        component: dagster-daemon
        deployment: daemon
        {{- with .Values.dagsterDaemon.labels }}
        {{- . | toYaml | nindent 8 }}
        {{- end }}
      annotations:
        {{- if $userDeployments.enabled }}
        checksum/dagster-workspace: {{ include (print $.Template.BasePath "/configmap-workspace.yaml") . | sha256sum }}
        {{- end }}
        checksum/dagster-instance: {{ include (print $.Template.BasePath "/configmap-instance.yaml") . | sha256sum }}
        {{- range $key, $value := .Values.dagsterDaemon.annotations }}
        {{ $key }}: {{ $value | squote }}
        {{- end }}
    spec:
      imagePullSecrets:
        {{- toYaml $.Values.imagePullSecrets | nindent 8 }}
      serviceAccountName: {{ include "dagster.serviceAccountName" $ }}
      automountServiceAccountToken: true
      securityContext:
        {{- toYaml .Values.dagsterDaemon.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.dagsterDaemon.extraPrependedInitContainers }}
        {{- range $container := .Values.dagsterDaemon.extraPrependedInitContainers }}
        - {{ toYaml $container | nindent 10 | trim }}
        {{- end }}
        {{- end }}
        {{- if .Values.dagsterDaemon.checkDbReadyInitContainer }}
        - name: check-db-ready
          image: {{ include "dagster.externalPostgresImage.name" $.Values.postgresql.image | quote }}
          imagePullPolicy: "{{- $.Values.postgresql.image.pullPolicy -}}"
          command: ['sh', '-c', {{ include "dagster.postgresql.pgisready" . | squote }}]
          securityContext:
            {{- toYaml .Values.dagsterDaemon.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.dagsterDaemon.initContainerResources | nindent 12 }}
        {{- end }}
        {{- if (and $userDeployments.enabled $userDeployments.enableSubchart) }}
        {{- range $deployment := $userDeployments.deployments }}
        - name: "init-user-deployment-{{- $deployment.name -}}"
          image: {{ include "dagster.externalImage.name" $.Values.busybox.image | quote }}
          command: ['sh', '-c', "until nslookup {{ $deployment.name -}}; do echo waiting for user service; sleep 2; done"]
          securityContext:
            {{- toYaml $.Values.dagsterDaemon.securityContext | nindent 12 }}
          {{- if $.Values.dagsterDaemon.initContainerResources }}
          resources:
            {{- toYaml $.Values.dagsterDaemon.initContainerResources | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- end }}
      containers:
        - name: {{ $.Chart.Name }}
          securityContext:
            {{- toYaml .Values.dagsterDaemon.securityContext | nindent 12 }}
          imagePullPolicy: {{ .Values.dagsterDaemon.image.pullPolicy }}
          image: {{ include "dagster.dagsterImage.name" (list $ .Values.dagsterDaemon.image) | quote }}
          command: [
            "/bin/bash",
            "-c",
            "{{- template "dagster.dagsterDaemon.daemonCommand" . }}"
          ]
          env:
            - name: DAGSTER_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "dagster.postgresql.secretName" $ | quote }}
                  key: postgresql-password
            - name: DAGSTER_DAEMON_HEARTBEAT_TOLERANCE
              value: "{{ .Values.dagsterDaemon.heartbeatTolerance }}"
            # This is a list by default, but for backcompat it can be a map. As a map it's written to the daemon-env
            # configmap.
            {{- if and (.Values.dagsterDaemon.env) (kindIs "slice" .Values.dagsterDaemon.env) }}
            {{- toYaml .Values.dagsterDaemon.env | nindent 12 }}
            {{- end}}
          envFrom:
            - configMapRef:
                name: {{ template "dagster.fullname" $ }}-daemon-env
            {{- range $envConfigMap := .Values.dagsterDaemon.envConfigMaps }}
            - configMapRef: {{- $envConfigMap | toYaml | nindent 16 }}
            {{- end }}
            {{- range $envSecret := .Values.dagsterDaemon.envSecrets }}
            - secretRef: {{- $envSecret | toYaml | nindent 16 }}
            {{- end }}
            {{- if eq $.Values.runLauncher.type "CeleryK8sRunLauncher" }}
            - secretRef:
                name: {{ $.Values.global.celeryConfigSecretName }}
            {{- end }}
          volumeMounts:
            - name: dagster-instance
              mountPath: "{{ $.Values.global.dagsterHome }}/dagster.yaml"
              subPath: dagster.yaml
            {{- if $userDeployments.enabled }}
            # Do not use `subPath` to allow the configmap to update if modified
            - name: dagster-workspace-yaml
              mountPath: "/dagster-workspace/"
            {{- end }}
            {{- if .Values.dagsterDaemon.volumeMounts }}
            {{- range $volumeMount := .Values.dagsterDaemon.volumeMounts }}
            - {{- $volumeMount | toYaml | nindent 14 }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.dagsterDaemon.resources | nindent 12 }}
          {{- if .Values.dagsterDaemon.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.dagsterDaemon.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.dagsterDaemon.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.dagsterDaemon.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.dagsterDaemon.startupProbe.enabled}}
          {{- $startupProbe := omit .Values.dagsterDaemon.startupProbe "enabled" }}
          startupProbe:
            {{- toYaml $startupProbe | nindent 12 }}
          {{- end }}
        {{- if .Values.dagsterDaemon.extraContainers }}
        {{- range $container := .Values.dagsterDaemon.extraContainers }}
        - {{ toYaml $container | nindent 10 | trim }}
        {{- end }}
        {{- end }}
      nodeSelector:
        {{- toYaml .Values.dagsterDaemon.nodeSelector | nindent 8 }}
      volumes:
        - name: dagster-instance
          configMap:
            name: {{ template "dagster.fullname" $ }}-instance
        {{- if $userDeployments.enabled }}
        - name: dagster-workspace-yaml
          configMap:
            name: {{ include "dagster.workspace.configmapName" . }}
        {{- end }}
        {{- if .Values.dagsterDaemon.volumes }}
        {{- range $volume := .Values.dagsterDaemon.volumes }}
        - {{- $volume | toYaml | nindent 10 }}
        {{- end }}
        {{- end }}
      affinity:
        {{- toYaml .Values.dagsterDaemon.affinity | nindent 8 }}
      tolerations:
        {{- toYaml .Values.dagsterDaemon.tolerations | nindent 8 }}
      {{- if .Values.dagsterDaemon.schedulerName }}
      schedulerName: {{ .Values.dagsterDaemon.schedulerName }}
      {{- end }}
---
{{ end }}
