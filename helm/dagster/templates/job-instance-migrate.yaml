{{- if (and .Values.migrate .Values.migrate.enabled) }}
{{- $_ := include "dagster.backcompat" . | mustFromJson -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "dagster.webserver.migrate" . | quote }}
  annotations:
    {{- range $key, $value := $_.Values.dagsterWebserver.annotations }}
    {{ $key }}: {{ $value | squote }}
    {{- end }}
spec:
  template:
    metadata:
      name: {{ include "dagster.webserver.migrate" . | quote }}
      annotations:
        {{- range $key, $value := $_.Values.dagsterWebserver.annotations }}
        {{ $key }}: {{ $value | squote }}
        {{- end }}
    spec:
      imagePullSecrets: {{ .Values.imagePullSecrets | toYaml | nindent 8 }}
      serviceAccountName: {{ include "dagster.serviceAccountName" . }}
      automountServiceAccountToken: true
      securityContext: {{ $_.Values.dagsterWebserver.podSecurityContext | toYaml | nindent 8 }}
      restartPolicy: Never
      {{- if .Values.migrate.initContainers }}
      initContainers:
      {{- range $container := .Values.migrate.initContainers }}
      - {{ toYaml $container | nindent 8 | trim }}
      {{- end }}
      {{- end }}
      containers:
        - name: dagster-instance-migrate
          securityContext: {{ $_.Values.dagsterWebserver.securityContext | toYaml | nindent 12 }}
          imagePullPolicy: {{ $_.Values.dagsterWebserver.image.pullPolicy }}
          image: {{ include "dagster.dagsterImage.name" (list $ $_.Values.dagsterWebserver.image) | quote }}
          command: ["dagster"]
          args: ["instance", "migrate"]
          env:
            - name: DAGSTER_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "dagster.postgresql.secretName" . | quote }}
                  key: postgresql-password
          envFrom:
            - configMapRef:
                name: {{ template "dagster.fullname" . }}-webserver-env
            {{- range $envConfigMap := $_.Values.dagsterWebserver.envConfigMaps }}
            - configMapRef: {{- $envConfigMap | toYaml | nindent 16 }}
            {{- end }}
            {{- range $envSecret := $_.Values.dagsterWebserver.envSecrets }}
            - secretRef: {{- $envSecret | toYaml | nindent 16 }}
            {{- end }}
            {{- if eq $.Values.runLauncher.type "CeleryK8sRunLauncher" }}
            - secretRef:
                name: {{ $.Values.global.celeryConfigSecretName }}
            {{- end }}
          volumeMounts:
            - name: dagster-instance
              mountPath: "{{ .Values.global.dagsterHome }}/dagster.yaml"
              subPath: dagster.yaml
            {{- if .Values.dagsterWebserver.volumeMounts }}
            {{- range $volumeMount := .Values.dagsterWebserver.volumeMounts }}
            - {{- $volumeMount | toYaml | nindent 14 }}
            {{- end }}
            {{- end }}
          resources: {{ $_.Values.dagsterWebserver.resources | toYaml | nindent 12 }}
      {{- if .Values.migrate.extraContainers }}
      {{- range $container := .Values.migrate.extraContainers }}
      - {{ toYaml $container | nindent 10 | trim }}
      {{- end }}
      {{- end }}
      volumes:
        - name: dagster-instance
          configMap:
            name: {{ template "dagster.fullname" . }}-instance
        {{- if .Values.dagsterWebserver.volumes }}
        {{- range $volume := .Values.dagsterWebserver.volumes }}
        - {{- $volume | toYaml | nindent 10 }}
        {{- end }}
        {{- end }}
      nodeSelector: {{ $_.Values.dagsterWebserver.nodeSelector | toYaml | nindent 8 }}
      affinity: {{ $_.Values.dagsterWebserver.affinity | toYaml | nindent 8 }}
      tolerations: {{ $_.Values.dagsterWebserver.tolerations | toYaml | nindent 8 }}
{{- end }}
