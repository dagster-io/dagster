apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "dagster.fullname" . }}-instance
  labels:
    app: {{ template "dagster.name" . }}
    chart: {{ template "dagster.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  dagster.yaml: |
    scheduler:
      {{- $schedulerType := .Values.scheduler.type }}

      {{- if eq $schedulerType "DagsterDaemonScheduler" }}
        {{- include "dagsterYaml.scheduler.daemon" . | indent 6 -}}
      {{- else if eq $schedulerType "CustomScheduler" }}
        {{- include "dagsterYaml.scheduler.custom" . | indent 6 -}}
      {{- end }}

    schedule_storage:
      module: dagster_postgres.schedule_storage
      class: PostgresScheduleStorage
      config:
        {{- include "dagsterYaml.postgresql.config" . | indent 8 }}

    run_launcher:
      {{- $runLauncherType := .Values.runLauncher.type }}

      {{- if eq $runLauncherType "CeleryK8sRunLauncher" }}
        {{- include "dagsterYaml.runLauncher.celery" . | indent 6 -}}
      {{- else if eq $runLauncherType "K8sRunLauncher" }}
        {{- include "dagsterYaml.runLauncher.k8s" . | indent 6 -}}
      {{- else if eq $runLauncherType "CustomRunLauncher" }}
        {{- include "dagsterYaml.runLauncher.custom" . | indent 6 -}}
      {{- end }}

    run_storage:
      module: dagster_postgres.run_storage
      class: PostgresRunStorage
      config:
        {{- include "dagsterYaml.postgresql.config" . | indent 8 }}

    event_log_storage:
      module: dagster_postgres.event_log
      class: PostgresEventLogStorage
      config:
        {{- include "dagsterYaml.postgresql.config" . | indent 8 }}

    {{- if and (.Values.dagsterDaemon.enabled) (.Values.dagsterDaemon.runCoordinator.enabled) }}
    {{- $runCoordinatorType := .Values.dagsterDaemon.runCoordinator.type }}
    run_coordinator:
      {{- if eq $runCoordinatorType "QueuedRunCoordinator" }}
        {{- include "dagsterYaml.runCoordinator.queued" . | indent 6 -}}
      {{- else if eq $runCoordinatorType "CustomRunCoordinator" }}
        {{- include "dagsterYaml.runCoordinator.custom" . | indent 6 -}}
      {{- end }}
    {{- else if (.Values.dagsterDaemon.enabled) }}
    run_coordinator:
      module: dagster._core.run_coordinator.sync_in_memory_run_coordinator
      class: SyncInMemoryRunCoordinator
    {{- end }}

    {{- $computeLogManagerType := .Values.computeLogManager.type }}
    compute_logs:
      {{- if eq $computeLogManagerType "NoOpComputeLogManager" -}}
        {{- include "dagsterYaml.computeLogManager.noop" . | indent 6 -}}
      {{- else if eq $computeLogManagerType "AzureBlobComputeLogManager" }}
        {{- include "dagsterYaml.computeLogManager.azure" . | indent 6 -}}
      {{- else if eq $computeLogManagerType "GCSComputeLogManager" }}
        {{- include "dagsterYaml.computeLogManager.gcs" . | indent 6 -}}
      {{- else if eq $computeLogManagerType "S3ComputeLogManager" }}
        {{- include "dagsterYaml.computeLogManager.s3" . | indent 6 -}}
      {{- else if eq $computeLogManagerType "LocalComputeLogManager" }}
        {{- include "dagsterYaml.computeLogManager.local" . | indent 6 -}}
      {{- else if eq $computeLogManagerType "CustomComputeLogManager" }}
        {{- include "dagsterYaml.computeLogManager.custom" . | indent 6 -}}
      {{- end }}

    {{- if .Values.pythonLogs }}
    python_logs:
      {{- if .Values.pythonLogs.pythonLogLevel }}
      python_log_level: {{ .Values.pythonLogs.pythonLogLevel }}
      {{- end }}
      {{- if .Values.pythonLogs.dagsterHandlerConfig }}
      dagster_handler_config: {{ .Values.pythonLogs.dagsterHandlerConfig | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.pythonLogs.managedPythonLoggers }}
      managed_python_loggers: {{ .Values.pythonLogs.managedPythonLoggers | toYaml | nindent 8 }}
      {{- end }}
    {{- end }}


    {{- if and (.Values.dagsterDaemon.enabled) (.Values.dagsterDaemon.runMonitoring.enabled) }}
    {{- $runMonitoring := .Values.dagsterDaemon.runMonitoring }}
    run_monitoring:
      enabled: {{ $runMonitoring.enabled }}
      start_timeout_seconds:  {{ $runMonitoring.startTimeoutSeconds }}
      {{- if not (kindIs "invalid" $runMonitoring.cancelTimeoutSeconds) }}
      cancel_timeout_seconds:  {{ $runMonitoring.cancelTimeoutSeconds }}
      {{- end }}
      {{- if not (kindIs "invalid" $runMonitoring.maxRuntimeSeconds) }}
      max_runtime_seconds:  {{ $runMonitoring.maxRuntimeSeconds }}
      {{- end }}
      {{- if not (kindIs "invalid" $runMonitoring.maxResumeRunAttempts) }}
      max_resume_run_attempts: {{ $runMonitoring.maxResumeRunAttempts }}
      {{- end }}
      poll_interval_seconds: {{ $runMonitoring.pollIntervalSeconds }}
      free_slots_after_run_end_seconds: {{ $runMonitoring.freeSlotsAfterRunEndSeconds }}
    {{- end }}

    {{- if and (.Values.dagsterDaemon.enabled) (.Values.dagsterDaemon.runRetries.enabled) }}
    {{- $runRetries := .Values.dagsterDaemon.runRetries }}
    run_retries:
      enabled: {{ $runRetries.enabled }}
      {{- if $runRetries.maxRetries }}
      max_retries: {{ $runRetries.maxRetries }}
      {{- end }}
      {{- if hasKey $runRetries "retryOnAssetOrOpFailure" }}
      retry_on_asset_or_op_failure: {{ $runRetries.retryOnAssetOrOpFailure }}
      {{- end }}
    {{- end }}

    {{- $sensors := .Values.dagsterDaemon.sensors }}
    {{- if and (.Values.dagsterDaemon.enabled) ($sensors.useThreads) }}
    sensors:
      use_threads: {{ $sensors.useThreads }}
      {{- if $sensors.numWorkers }}
      num_workers: {{ $sensors.numWorkers }}
      {{- end }}
      {{- if $sensors.numSubmitWorkers }}
      num_submit_workers: {{ $sensors.numSubmitWorkers }}
      {{- end }}
    {{- end }}

    {{- $schedules := .Values.dagsterDaemon.schedules }}
    {{- if and (.Values.dagsterDaemon.enabled) ($schedules.useThreads) }}
    schedules:
      use_threads: {{ $schedules.useThreads }}
      {{- if $schedules.numWorkers }}
      num_workers: {{ $schedules.numWorkers }}
      {{- end }}
      {{- if $schedules.numSubmitWorkers }}
      num_submit_workers: {{ $schedules.numSubmitWorkers }}
      {{- end }}
    {{- end }}

    telemetry:
      enabled: {{ .Values.telemetry.enabled }}

    {{- if .Values.retention.enabled }}
    retention:
      {{- if .Values.retention.sensor }}
      sensor:
        purge_after_days: {{ .Values.retention.sensor.purgeAfterDays | toYaml | nindent 12 }}
      {{- end }}
      {{- if .Values.retention.schedule }}
      schedule:
        purge_after_days: {{ .Values.retention.schedule.purgeAfterDays | toYaml | nindent 12 }}
      {{- end }}
      {{- if .Values.retention.autoMaterialize }}
      auto_materialize:
        purge_after_days: {{ .Values.retention.autoMaterialize.purgeAfterDays | toYaml | nindent 12 }}
      {{- end }}
    {{- end }}

    {{- if .Values.additionalInstanceConfig }}
    {{- .Values.additionalInstanceConfig | toYaml | nindent 4}}
    {{- end }}
