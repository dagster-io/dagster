import os
import shutil
from pathlib import Path
from tempfile import TemporaryDirectory
from unittest import mock

import pytest
from click.testing import CliRunner


def mock_vscode_cli_command(args: list[str]) -> bytes:
    return b"redhat.vscode-yaml"


def test_infer_vscode_path() -> None:
    from dagster_blueprints.cli import infer_vscode_path

    with TemporaryDirectory() as temp_dir:
        assert infer_vscode_path(Path(temp_dir)) is None

    with TemporaryDirectory() as temp_dir:
        vscode_dir = Path(temp_dir) / ".vscode"
        vscode_dir.mkdir()

        assert infer_vscode_path(Path(temp_dir)) == temp_dir

    with TemporaryDirectory() as temp_dir:
        vscode_dir = Path(temp_dir) / ".vscode"
        vscode_dir.mkdir()

        subdir = vscode_dir / "subdir"
        subdir.mkdir()

        assert infer_vscode_path(subdir) == temp_dir

    with TemporaryDirectory() as temp_dir:
        vscode_dir = Path(temp_dir) / ".vscode"
        vscode_dir.mkdir()

        subdir = vscode_dir / "subdir"
        subdir.mkdir()

        nested_subdir = subdir / "nested_subdir"
        nested_subdir.mkdir()

        assert infer_vscode_path(nested_subdir) == temp_dir


def test_locate_from_pyproject_yaml() -> None:
    from dagster_blueprints.cli import get_python_modules_from_pyproject

    sample_pyproject_path = Path(__file__).parent / "sample_blueprint_project" / "pyproject.toml"
    assert get_python_modules_from_pyproject(os.fspath(sample_pyproject_path)) == [
        "blueprint_project",
    ]


@pytest.mark.parametrize("explicit_loader_module", [True, False])
def test_print_single_schema(explicit_loader_module: bool) -> None:
    from dagster_blueprints.cli import print_schema

    sample_project_path = Path(__file__).parent / "sample_blueprint_project"

    os.chdir(sample_project_path)

    args = []
    if explicit_loader_module:
        args.extend(["--loader-module", "blueprint_project"])
    out = CliRunner().invoke(print_schema, args)

    # file has two loaders, must explicitly specify
    assert out.exit_code == 1

    args.extend(["--loader-name", "loader"])
    out = CliRunner().invoke(print_schema, args)
    assert '"SimpleAssetBlueprint"' in out.output
    assert "\n  " in out.output  # pretty-printed


@pytest.mark.parametrize("explicit_loader_module", [True, False])
@pytest.mark.parametrize("explicit_vscode_folder_path", [True, False])
def test_configure_vscode(explicit_loader_module: bool, explicit_vscode_folder_path: bool) -> None:
    # mock dagster_blueprints.cli.run_vscode_cli_command to return "redhat.vscode-yaml"
    with mock.patch("dagster_blueprints.cli.run_vscode_cli_command", new=mock_vscode_cli_command):
        from dagster_blueprints.cli import configure_vscode

        sample_project_path = Path(__file__).parent / "sample_blueprint_project"

        sample_project_vscode_path = sample_project_path / ".vscode"
        if sample_project_vscode_path.exists():
            shutil.rmtree(sample_project_vscode_path)

        expected_schema_filepaths = [
            (
                sample_project_path
                / "blueprint_project"
                / folder
                / "dagster.autogenerated.schema.json"
            )
            for folder in ("blueprints", "other_blueprints")
        ]
        for expected_schema_filepath in expected_schema_filepaths:
            if expected_schema_filepath.exists():
                os.remove(expected_schema_filepath)

        sample_project_vscode_path.mkdir()

        os.chdir(sample_project_path)

        args = []
        if explicit_loader_module:
            args.extend(["--loader-module", "blueprint_project"])
        if explicit_vscode_folder_path:
            args.extend(["--vscode-folder-path", sample_project_path])
        out = CliRunner().invoke(configure_vscode, args)

        assert out.exit_code == 0

        for expected_schema_filepath in expected_schema_filepaths:
            assert expected_schema_filepath.exists()
            schema = expected_schema_filepath.read_text()
            assert "SimpleAssetBlueprint" in schema

        expected_vscode_plugin_folder_filepath = (
            sample_project_vscode_path / "dagster-blueprint-schema"
        )
        assert expected_vscode_plugin_folder_filepath.exists()
        expected_compiled_plugin_filepath = (
            expected_vscode_plugin_folder_filepath / "dagster-blueprint-schema.vsix"
        )
        assert expected_compiled_plugin_filepath.exists()
