[tool.dg]

# ("project", required) Marks this as a Dagster project.
directory_type = "project"

[tool.dg.project]

# (string, required) Specifies the root module of the project.
root_module = "my_project" # this is required

# (string, optional) Specifies the project submodule where new components and
# definitions are scaffolded.
#
# Defaults to `<root_module>.defs`.
defs_module = "my_project.defs"

# (string, optional) Specifies the project submodule containing the top-level `Definitions`
# object that is targeted when loading the project as a code location.
#
# Defaults to `<root_module>.definitions`.
code_location_target_module = "my_project.definitions"

# (string, optional) Specifies the name used for the code location when the project is
# loaded as a code location.
#
# Defaults to the project name (which is usually the # hyphenated variant of
# the root module name).
code_location_name = "my-project"

# (list[string], optional) List of module names or name-matching patterns to include in the dg
# registry. Defaults to `<root_module>.components`. Patterns can include `*` to match entire
# segments of the module name. * does NOT match partial segments. Example:
#
# - foo.*.bar matches foo.baz.bar and foo.qux.bar
# - foo.*bar is invalid because * does not constitute an entire segment
#
# When a new component is scaffolded with `dg scaffold component <module>.MyComponent`, this setting
# will be created if it does not already exist and the module will be added to the list.
# 
# Defaults to [].
registry_modules = [
  "my_project.alternate_components.*",
]

[tool.dg.cli]

# Application-level settings can be set here. See "User configuration file"
# section for a comprehensive list of available settings.

# If the project is inside a workspace, then this section is disallowed
# (`tool.dg.cli` should # be set in the workspace config instead).
