/**
 * THIS FILE IS GENERATED BY `yarn generate-integration-docs`.
 *
 * DO NOT EDIT MANUALLY.
 */

import {IntegrationFrontmatter} from '../types';
import fivetranLogo from './logos/fivetran.svg';

export const logo = fivetranLogo;

export const frontmatter: IntegrationFrontmatter = {
  id: 'fivetran',
  status: 'published',
  name: 'Fivetran',
  title: 'Using Dagster with Fivetran',
  excerpt: 'Orchestrate Fivetran connectors syncs with upstream or downstream dependencies.',
  partnerlink: 'https://www.fivetran.com/',
  categories: ['ETL'],
  enabledBy: [],
  enables: [],
  tags: ['dagster-supported', 'etl'],
};

export const content =
  'import Beta from \'@site/docs/partials/\\_Beta.md\';\n\n<Beta />\n\nThis guide provides instructions for using Dagster with Fivetran using the `dagster-fivetran` library. Your Fivetran connector tables can be represented as assets in the Dagster asset graph, allowing you to track lineage and dependencies between Fivetran assets and data assets you are already modeling in Dagster. You can also use Dagster to orchestrate Fivetran connectors, allowing you to trigger syncs for these on a cadence or based on upstream data changes.\n\n:::note\n\nYour Fivetran connectors must have been synced at least once to be represented in Dagster.\n\n:::\n\n## What you\'ll learn\n\n- How to represent Fivetran assets in the Dagster asset graph, including lineage to other Dagster assets.\n- How to customize asset definition metadata for these Fivetran assets.\n- How to materialize Fivetran connector tables from Dagster.\n- How to customize how Fivetran connector tables are materialized.\n\n<details>\n  <summary>Prerequisites</summary>\n\n- The `dagster` and `dagster-fivetran` libraries installed in your environment\n- Familiarity with asset definitions and the Dagster asset graph\n- Familiarity with Dagster resources\n- Familiarity with Fivetran concepts, like connectors and connector tables\n- A Fivetran workspace\n- A Fivetran API key and API secret. For more information, see [Getting Started](https://fivetran.com/docs/rest-api/getting-started) in the Fivetran REST API documentation.\n\n</details>\n\n## Set up your environment\n\nTo get started, you\'ll need to install the `dagster` and `dagster-fivetran` Python packages:\n\n```bash\npip install dagster dagster-fivetran\n```\n\n## Represent Fivetran assets in the asset graph\n\nTo load Fivetran assets into the Dagster asset graph, you must first construct a <PyObject section="libraries" module="dagster_fivetran" object="FivetranWorkspace" /> resource, which allows Dagster to communicate with your Fivetran workspace. You\'ll need to supply your account ID, API key and API secret. See [Getting Started](https://fivetran.com/docs/rest-api/getting-started) in the Fivetran REST API documentation for more information on how to create your API key and API secret.\n\nDagster can automatically load all connector tables from your Fivetran workspace as asset specs. Call the <PyObject section="libraries" module="dagster_fivetran" object="load_fivetran_asset_specs" /> function, which returns list of <PyObject section="assets" module="dagster" object="AssetSpec" />s representing your Fivetran assets. You can then include these asset specs in your <PyObject section="definitions" module="dagster" object="Definitions" /> object:\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, load_fivetran_asset_specs\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\nfivetran_specs = load_fivetran_asset_specs(fivetran_workspace)\ndefs = dg.Definitions(assets=fivetran_specs, resources={"fivetran": fivetran_workspace})\n```\n        \n\n### Sync and materialize Fivetran assets\n\nYou can use Dagster to sync Fivetran connectors and materialize Fivetran connector tables. You can use the <PyObject section="libraries" module="dagster_fivetran" object="build_fivetran_assets_definitions" /> factory to create all assets definitions for your Fivetran workspace.\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, build_fivetran_assets_definitions\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\nall_fivetran_assets = build_fivetran_assets_definitions(workspace=fivetran_workspace)\n\ndefs = dg.Definitions(\n    assets=all_fivetran_assets,\n    resources={"fivetran": fivetran_workspace},\n)\n```\n        \n\n### Customize the materialization of Fivetran assets\n\nIf you want to customize the sync of your connectors, you can use the <PyObject section="libraries" module="dagster_fivetran" object="fivetran_assets" /> decorator to do so. This allows you to execute custom code before and after the call to the Fivetran sync.\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, fivetran_assets\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\n\n@fivetran_assets(\n    # Replace with your connector ID\n    connector_id="fivetran_connector_id",\n    name="fivetran_connector_id",\n    group_name="fivetran_connector_id",\n    workspace=fivetran_workspace,\n)\ndef fivetran_connector_assets(\n    context: dg.AssetExecutionContext, fivetran: FivetranWorkspace\n):\n    # Do something before the materialization...\n    yield from fivetran.sync_and_poll(context=context)\n    # Do something after the materialization...\n\n\ndefs = dg.Definitions(\n    assets=[fivetran_connector_assets],\n    resources={"fivetran": fivetran_workspace},\n)\n```\n        \n\n### Customize asset definition metadata for Fivetran assets\n\nBy default, Dagster will generate asset specs for each Fivetran asset and populate default metadata. You can further customize asset properties by passing an instance of the custom <PyObject section="libraries" module="dagster_fivetran" object="DagsterFivetranTranslator" /> to the <PyObject section="libraries" module="dagster_fivetran" object="load_fivetran_asset_specs" /> function.\n\n\n```python\nfrom dagster_fivetran import (\n    DagsterFivetranTranslator,\n    FivetranConnectorTableProps,\n    FivetranWorkspace,\n    load_fivetran_asset_specs,\n)\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\n\n# A translator class lets us customize properties of the built\n# Fivetran assets, such as the owners or asset key\nclass MyCustomFivetranTranslator(DagsterFivetranTranslator):\n    def get_asset_spec(self, props: FivetranConnectorTableProps) -> dg.AssetSpec:\n        # We create the default asset spec using super()\n        default_spec = super().get_asset_spec(props)\n        # We customize the metadata and asset key prefix for all assets\n        return default_spec.replace_attributes(\n            key=default_spec.key.with_prefix("prefix"),\n        ).merge_attributes(metadata={"custom": "metadata"})\n\n\nfivetran_specs = load_fivetran_asset_specs(\n    fivetran_workspace, dagster_fivetran_translator=MyCustomFivetranTranslator()\n)\n\ndefs = dg.Definitions(assets=fivetran_specs, resources={"fivetran": fivetran_workspace})\n```\n        \n\nNote that `super()` is called in each of the overridden methods to generate the default asset spec. It is best practice to generate the default asset spec before customizing it.\n\nYou can pass an instance of the custom <PyObject section="libraries" module="dagster_fivetran" object="DagsterFivetranTranslator" /> to the <PyObject section="libraries" module="dagster_fivetran" object="fivetran_assets" /> decorator or the <PyObject section="libraries" module="dagster_fivetran" object="build_fivetran_assets_definitions" /> factory.\n\n### Fetching column-level metadata for Fivetran assets\n\nDagster allows you to emit column-level metadata, like [column schema](/guides/build/assets/metadata-and-tags/index.md#standard-metadata-types) and [column lineage](/guides/build/assets/metadata-and-tags/index.md#column-lineage), as [materialization metadata](/guides/build/assets/metadata-and-tags/index.md#runtime-metadata).\n\nWith this metadata, you can view documentation in Dagster for all columns in your Fivetran connector tables.\n\nTo enable this feature, call <PyObject section="libraries" object="fivetran_event_iterator.FivetranEventIterator.fetch_column_metadata" module="dagster_fivetran" displayText="fetch_column_metadata()" /> on the <PyObject section="libraries" object="fivetran_event_iterator.FivetranEventIterator" module="dagster_fivetran" /> returned by the `sync_and_poll()` call on the <PyObject section="libraries" module="dagster_fivetran" object="FivetranWorkspace" /> resource.\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, fivetran_assets\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\n\n@fivetran_assets(\n    # Replace with your connector ID\n    connector_id="fivetran_connector_id",\n    workspace=fivetran_workspace,\n)\ndef fivetran_connector_assets(\n    context: dg.AssetExecutionContext, fivetran: FivetranWorkspace\n):\n    yield from fivetran.sync_and_poll(context=context).fetch_column_metadata()\n\n\ndefs = dg.Definitions(\n    assets=[fivetran_connector_assets],\n    resources={"fivetran": fivetran_workspace},\n)\n```\n        \n\n### Load Fivetran asset for selected connectors\n\nTo select a subset of Fivetran connectors for which your Fivetran assets will be loaded, you can use the <PyObject section="libraries" module="dagster_fivetran" object="ConnectorSelectorFn" /> callback and define your selection conditions.\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, build_fivetran_assets_definitions\n\nimport dagster as dg\n\nfivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_API_SECRET"),\n)\n\nall_fivetran_assets = build_fivetran_assets_definitions(\n    workspace=fivetran_workspace,\n    connector_selector_fn=(\n        lambda connector: connector.id in {"some_connector_id", "another_connector_id"}\n    ),\n)\n\ndefs = dg.Definitions(\n    assets=all_fivetran_assets,\n    resources={"fivetran": fivetran_workspace},\n)\n```\n        \n\n### Load Fivetran assets from multiple workspaces\n\nDefinitions from multiple Fivetran workspaces can be combined by instantiating multiple <PyObject section="libraries" module="dagster_fivetran" object="FivetranWorkspace" /> resources and merging their specs. This lets you view all your Fivetran assets in a single asset graph:\n\n\n```python\nfrom dagster_fivetran import FivetranWorkspace, load_fivetran_asset_specs\n\nimport dagster as dg\n\nsales_fivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_SALES_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_SALES_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_SALES_API_SECRET"),\n)\nmarketing_fivetran_workspace = FivetranWorkspace(\n    account_id=dg.EnvVar("FIVETRAN_MARKETING_ACCOUNT_ID"),\n    api_key=dg.EnvVar("FIVETRAN_MARKETING_API_KEY"),\n    api_secret=dg.EnvVar("FIVETRAN_MARKETING_API_SECRET"),\n)\n\nsales_fivetran_specs = load_fivetran_asset_specs(sales_fivetran_workspace)\nmarketing_fivetran_specs = load_fivetran_asset_specs(marketing_fivetran_workspace)\n\n# Merge the specs into a single set of definitions\ndefs = dg.Definitions(\n    assets=[*sales_fivetran_specs, *marketing_fivetran_specs],\n    resources={\n        "marketing_fivetran": marketing_fivetran_workspace,\n        "sales_fivetran": sales_fivetran_workspace,\n    },\n)\n```\n        \n\n### About Fivetran\n\n**Fivetran** ingests data from SaaS applications, databases, and servers. The data is stored and typically used for analytics.';
