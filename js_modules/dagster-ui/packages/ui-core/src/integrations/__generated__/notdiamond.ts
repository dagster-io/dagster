/**
 * THIS FILE IS GENERATED BY `yarn generate-integration-docs`.
 *
 * DO NOT EDIT MANUALLY.
 */

import {IntegrationFrontmatter} from '../types';
import notdiamondLogo from './logos/notdiamond.png';

export const logo = notdiamondLogo;

export const frontmatter: IntegrationFrontmatter = {
  id: 'notdiamond',
  status: 'published',
  name: 'Not Diamond',
  title: 'Dagster & Not Diamond',
  excerpt: '',
  partnerlink: '',
  categories: [],
  enabledBy: [],
  enables: [],
  tags: [],
};

export const content =
  'Leverage the Not Diamond resource to easily determine which LLM provider is most appropriate for your use case.\n\n### Installation\n\n```bash\npip install dagster-notdiamond\n```\n\n### Example\n\n```python\nimport time\n\nimport dagster as dg\nimport dagster_notdiamond as nd\nimport dagster_openai as oai\n\n\n@dg.asset(kinds={"python"})\ndef book_review_data(context: dg.AssetExecutionContext) -> dict:\n    data = {\n        "title": "Cat\'s Cradle",\n        "author": "Kurt Vonnegut",\n        "genre": "Science Fiction",\n        "publicationYear": 1963,\n        "reviews": [\n            {\n                "reviewer": "John Doe",\n                "rating": 4.5,\n                "content": "A thought-provoking satire on science and religion. Vonnegut\'s wit shines through.",\n            },\n            {\n                "reviewer": "Jane Smith",\n                "rating": 5,\n                "content": "An imaginative and darkly humorous exploration of humanity\'s follies. A must-read!",\n            },\n            {\n                "reviewer": "Alice Johnson",\n                "rating": 3.5,\n                "content": "Intriguing premise but felt a bit disjointed at times. Still enjoyable.",\n            },\n        ],\n    }\n    context.add_output_metadata(metadata={"num_reviews": len(data.get("reviews", []))})\n    return data\n\n\n@dg.asset(\n    kinds={"openai", "notdiamond"}, automation_condition=dg.AutomationCondition.eager()\n)\ndef book_reviews_summary(\n    context: dg.AssetExecutionContext,\n    notdiamond: nd.NotDiamondResource,\n    openai: oai.OpenAIResource,\n    book_review_data: dict,\n) -> dg.MaterializeResult:\n    prompt = f"""\n    Given the book reviews for {book_review_data["title"]}, provide a detailed summary:\n\n    {\'|\'.join([r[\'content\'] for r in book_review_data["reviews"]])}\n    """\n\n    with notdiamond.get_client(context) as client:\n        start = time.time()\n        session_id, best_llm = client.model_select(\n            model=["openai/gpt-4o", "openai/gpt-4o-mini"],\n            tradeoff="cost",\n            messages=[\n                {"role": "system", "content": "You are an expert in literature"},\n                {"role": "user", "content": prompt},\n            ],\n        )\n        duration = time.time() - start\n\n    with openai.get_client(context) as client:\n        chat_completion = client.chat.completions.create(\n            model=best_llm.model,\n            messages=[{"role": "user", "content": prompt}],\n        )\n\n    summary = chat_completion.choices[0].message.content or ""\n\n    return dg.MaterializeResult(\n        metadata={\n            "nd_session_id": session_id,\n            "nd_best_llm_model": best_llm.model,\n            "nd_best_llm_provider": best_llm.provider,\n            "nd_routing_latency": duration,\n            "summary": dg.MetadataValue.md(summary),\n        }\n    )\n\n\ndefs = dg.Definitions(\n    assets=[book_review_data, book_reviews_summary],\n    resources={\n        "notdiamond": nd.NotDiamondResource(api_key=dg.EnvVar("NOTDIAMOND_API_KEY")),\n        "openai": oai.OpenAIResource(api_key=dg.EnvVar("OPENAI_API_KEY")),\n    },\n)\n```\n\n### About Not Diamond\n\n[Not Diamond](https://www.notdiamond.ai/) is a service that recommends the best model for every query, improving accuracy and reducing costs. It can train your own router with your evaluation data and support joint prompt optimization.';
