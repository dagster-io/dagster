// Generated from /Users/salazarm/code/dagster/js_modules/dagster-ui/packages/ui-core/src/automation-selection/AutomationSelection.g4 by ANTLR 4.9.0-SNAPSHOT

import {CharStream} from 'antlr4ts/CharStream';
import {Lexer} from 'antlr4ts/Lexer';
import {Vocabulary} from 'antlr4ts/Vocabulary';
import {VocabularyImpl} from 'antlr4ts/VocabularyImpl';
import {ATN} from 'antlr4ts/atn/ATN';
import {ATNDeserializer} from 'antlr4ts/atn/ATNDeserializer';
import {LexerATNSimulator} from 'antlr4ts/atn/LexerATNSimulator';
import * as Utils from 'antlr4ts/misc/Utils';

export class AutomationSelectionLexer extends Lexer {
  public static readonly AND = 1;
  public static readonly OR = 2;
  public static readonly NOT = 3;
  public static readonly EQUAL = 4;
  public static readonly COLON = 5;
  public static readonly STAR = 6;
  public static readonly LPAREN = 7;
  public static readonly RPAREN = 8;
  public static readonly NAME = 9;
  public static readonly CODE_LOCATION = 10;
  public static readonly TAG = 11;
  public static readonly STATUS = 12;
  public static readonly TYPE = 13;
  public static readonly QUOTED_STRING = 14;
  public static readonly UNQUOTED_STRING = 15;
  public static readonly UNQUOTED_WILDCARD_STRING = 16;
  public static readonly NULL_STRING = 17;
  public static readonly WS = 18;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'AND',
    'OR',
    'NOT',
    'EQUAL',
    'COLON',
    'STAR',
    'LPAREN',
    'RPAREN',
    'NAME',
    'CODE_LOCATION',
    'TAG',
    'STATUS',
    'TYPE',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'NULL_STRING',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    "'='",
    "':'",
    "'*'",
    "'('",
    "')'",
    "'name'",
    "'code_location'",
    "'tag'",
    "'status'",
    "'type'",
    undefined,
    undefined,
    undefined,
    "'<null>'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'AND',
    'OR',
    'NOT',
    'EQUAL',
    'COLON',
    'STAR',
    'LPAREN',
    'RPAREN',
    'NAME',
    'CODE_LOCATION',
    'TAG',
    'STATUS',
    'TYPE',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'NULL_STRING',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    AutomationSelectionLexer._LITERAL_NAMES,
    AutomationSelectionLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return AutomationSelectionLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(AutomationSelectionLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'AutomationSelection.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return AutomationSelectionLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return AutomationSelectionLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return AutomationSelectionLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return AutomationSelectionLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x8F\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05' +
    '\x02.\n\x02\x03\x03\x03\x03\x03\x03\x03\x03\x05\x034\n\x03\x03\x04\x03' +
    '\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04<\n\x04\x03\x05\x03\x05\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n' +
    '\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03' +
    '\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03' +
    '\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03' +
    '\x0F\x07\x0Fm\n\x0F\f\x0F\x0E\x0Fp\v\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10' +
    '\x07\x10v\n\x10\f\x10\x0E\x10y\v\x10\x03\x11\x03\x11\x07\x11}\n\x11\f' +
    '\x11\x0E\x11\x80\v\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12' +
    '\x03\x12\x03\x13\x06\x13\x8A\n\x13\r\x13\x0E\x13\x8B\x03\x13\x03\x13\x02' +
    '\x02\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r' +
    '\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B' +
    '\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\x03\x02\b' +
    '\x06\x02\f\f\x0F\x0F$$^^\x05\x02C\\aac|\x06\x022;B\\aac|\x06\x02,,C\\' +
    'aac|\x07\x02,,2;B\\aac|\x05\x02\v\f\x0F\x0F""\x02\x95\x02\x03\x03\x02' +
    '\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02' +
    '\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02' +
    '\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02' +
    '\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02' +
    '\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02' +
    '\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05' +
    '3\x03\x02\x02\x02\x07;\x03\x02\x02\x02\t=\x03\x02\x02\x02\v?\x03\x02\x02' +
    '\x02\rA\x03\x02\x02\x02\x0FC\x03\x02\x02\x02\x11E\x03\x02\x02\x02\x13' +
    'G\x03\x02\x02\x02\x15L\x03\x02\x02\x02\x17Z\x03\x02\x02\x02\x19^\x03\x02' +
    '\x02\x02\x1Be\x03\x02\x02\x02\x1Dj\x03\x02\x02\x02\x1Fs\x03\x02\x02\x02' +
    "!z\x03\x02\x02\x02#\x81\x03\x02\x02\x02%\x89\x03\x02\x02\x02'(\x07c\x02" +
    '\x02()\x07p\x02\x02).\x07f\x02\x02*+\x07C\x02\x02+,\x07P\x02\x02,.\x07' +
    "F\x02\x02-'\x03\x02\x02\x02-*\x03\x02\x02\x02.\x04\x03\x02\x02\x02/0" +
    '\x07q\x02\x0204\x07t\x02\x0212\x07Q\x02\x0224\x07T\x02\x023/\x03\x02\x02' +
    '\x0231\x03\x02\x02\x024\x06\x03\x02\x02\x0256\x07p\x02\x0267\x07q\x02' +
    '\x027<\x07v\x02\x0289\x07P\x02\x029:\x07Q\x02\x02:<\x07V\x02\x02;5\x03' +
    '\x02\x02\x02;8\x03\x02\x02\x02<\b\x03\x02\x02\x02=>\x07?\x02\x02>\n\x03' +
    '\x02\x02\x02?@\x07<\x02\x02@\f\x03\x02\x02\x02AB\x07,\x02\x02B\x0E\x03' +
    '\x02\x02\x02CD\x07*\x02\x02D\x10\x03\x02\x02\x02EF\x07+\x02\x02F\x12\x03' +
    '\x02\x02\x02GH\x07p\x02\x02HI\x07c\x02\x02IJ\x07o\x02\x02JK\x07g\x02\x02' +
    'K\x14\x03\x02\x02\x02LM\x07e\x02\x02MN\x07q\x02\x02NO\x07f\x02\x02OP\x07' +
    'g\x02\x02PQ\x07a\x02\x02QR\x07n\x02\x02RS\x07q\x02\x02ST\x07e\x02\x02' +
    'TU\x07c\x02\x02UV\x07v\x02\x02VW\x07k\x02\x02WX\x07q\x02\x02XY\x07p\x02' +
    '\x02Y\x16\x03\x02\x02\x02Z[\x07v\x02\x02[\\\x07c\x02\x02\\]\x07i\x02\x02' +
    ']\x18\x03\x02\x02\x02^_\x07u\x02\x02_`\x07v\x02\x02`a\x07c\x02\x02ab\x07' +
    'v\x02\x02bc\x07w\x02\x02cd\x07u\x02\x02d\x1A\x03\x02\x02\x02ef\x07v\x02' +
    '\x02fg\x07{\x02\x02gh\x07r\x02\x02hi\x07g\x02\x02i\x1C\x03\x02\x02\x02' +
    'jn\x07$\x02\x02km\n\x02\x02\x02lk\x03\x02\x02\x02mp\x03\x02\x02\x02nl' +
    '\x03\x02\x02\x02no\x03\x02\x02\x02oq\x03\x02\x02\x02pn\x03\x02\x02\x02' +
    'qr\x07$\x02\x02r\x1E\x03\x02\x02\x02sw\t\x03\x02\x02tv\t\x04\x02\x02u' +
    't\x03\x02\x02\x02vy\x03\x02\x02\x02wu\x03\x02\x02\x02wx\x03\x02\x02\x02' +
    'x \x03\x02\x02\x02yw\x03\x02\x02\x02z~\t\x05\x02\x02{}\t\x06\x02\x02|' +
    '{\x03\x02\x02\x02}\x80\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7F\x03\x02' +
    '\x02\x02\x7F"\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x81\x82\x07>\x02\x02' +
    '\x82\x83\x07p\x02\x02\x83\x84\x07w\x02\x02\x84\x85\x07n\x02\x02\x85\x86' +
    '\x07n\x02\x02\x86\x87\x07@\x02\x02\x87$\x03\x02\x02\x02\x88\x8A\t\x07' +
    '\x02\x02\x89\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x89\x03\x02' +
    '\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8D\x03\x02\x02\x02\x8D\x8E\b\x13' +
    '\x02\x02\x8E&\x03\x02\x02\x02\n\x02-3;nw~\x8B\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!AutomationSelectionLexer.__ATN) {
      AutomationSelectionLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(AutomationSelectionLexer._serializedATN),
      );
    }

    return AutomationSelectionLexer.__ATN;
  }
}
