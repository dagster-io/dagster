// Generated from /Users/marcosalazar/code/dagster/js_modules/dagster-ui/packages/ui-core/src/run-selection/RunSelection.g4 by ANTLR 4.9.0-SNAPSHOT

import {CharStream} from 'antlr4ts/CharStream';
import {Lexer} from 'antlr4ts/Lexer';
import {Vocabulary} from 'antlr4ts/Vocabulary';
import {VocabularyImpl} from 'antlr4ts/VocabularyImpl';
import {ATN} from 'antlr4ts/atn/ATN';
import {ATNDeserializer} from 'antlr4ts/atn/ATNDeserializer';
import {LexerATNSimulator} from 'antlr4ts/atn/LexerATNSimulator';
import * as Utils from 'antlr4ts/misc/Utils';

export class RunSelectionLexer extends Lexer {
  public static readonly AND = 1;
  public static readonly OR = 2;
  public static readonly NOT = 3;
  public static readonly STAR = 4;
  public static readonly PLUS = 5;
  public static readonly DIGITS = 6;
  public static readonly COLON = 7;
  public static readonly LPAREN = 8;
  public static readonly RPAREN = 9;
  public static readonly NAME = 10;
  public static readonly STATUS = 11;
  public static readonly SINKS = 12;
  public static readonly ROOTS = 13;
  public static readonly QUOTED_STRING = 14;
  public static readonly UNQUOTED_STRING = 15;
  public static readonly UNQUOTED_WILDCARD_STRING = 16;
  public static readonly WS = 17;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'NAME',
    'STATUS',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    "'*'",
    "'+'",
    undefined,
    "':'",
    "'('",
    "')'",
    "'name'",
    "'status'",
    "'sinks'",
    "'roots'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'NAME',
    'STATUS',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    RunSelectionLexer._LITERAL_NAMES,
    RunSelectionLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return RunSelectionLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(RunSelectionLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'RunSelection.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return RunSelectionLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return RunSelectionLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return RunSelectionLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return RunSelectionLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\x80\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x05\x02,\n\x02\x03' +
    '\x03\x03\x03\x03\x03\x03\x03\x05\x032\n\x03\x03\x04\x03\x04\x03\x04\x03' +
    '\x04\x03\x04\x03\x04\x05\x04:\n\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x07\x06\x07A\n\x07\r\x07\x0E\x07B\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n' +
    '\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03' +
    '\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E' +
    '\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x07\x0Fe\n\x0F\f\x0F\x0E\x0Fh\v\x0F\x03' +
    '\x0F\x03\x0F\x03\x10\x03\x10\x07\x10n\n\x10\f\x10\x0E\x10q\v\x10\x03\x11' +
    '\x03\x11\x07\x11u\n\x11\f\x11\x0E\x11x\v\x11\x03\x12\x06\x12{\n\x12\r' +
    '\x12\x0E\x12|\x03\x12\x03\x12\x02\x02\x02\x13\x03\x02\x03\x05\x02\x04' +
    '\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v' +
    '\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!' +
    '\x02\x12#\x02\x13\x03\x02\t\x03\x022;\x06\x02\f\f\x0F\x0F$$^^\x05\x02' +
    'C\\aac|\x06\x022;C\\aac|\x06\x02,,C\\aac|\x07\x02,,2;C\\aac|\x05\x02\v' +
    '\f\x0F\x0F""\x02\x87\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02' +
    '\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02' +
    '\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02' +
    '\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02' +
    '\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02' +
    '\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x03+\x03' +
    '\x02\x02\x02\x051\x03\x02\x02\x02\x079\x03\x02\x02\x02\t;\x03\x02\x02' +
    '\x02\v=\x03\x02\x02\x02\r@\x03\x02\x02\x02\x0FD\x03\x02\x02\x02\x11F\x03' +
    '\x02\x02\x02\x13H\x03\x02\x02\x02\x15J\x03\x02\x02\x02\x17O\x03\x02\x02' +
    '\x02\x19V\x03\x02\x02\x02\x1B\\\x03\x02\x02\x02\x1Db\x03\x02\x02\x02\x1F' +
    'k\x03\x02\x02\x02!r\x03\x02\x02\x02#z\x03\x02\x02\x02%&\x07c\x02\x02&' +
    "'\x07p\x02\x02',\x07f\x02\x02()\x07C\x02\x02)*\x07P\x02\x02*,\x07F\x02" +
    '\x02+%\x03\x02\x02\x02+(\x03\x02\x02\x02,\x04\x03\x02\x02\x02-.\x07q\x02' +
    '\x02.2\x07t\x02\x02/0\x07Q\x02\x0202\x07T\x02\x021-\x03\x02\x02\x021/' +
    '\x03\x02\x02\x022\x06\x03\x02\x02\x0234\x07p\x02\x0245\x07q\x02\x025:' +
    '\x07v\x02\x0267\x07P\x02\x0278\x07Q\x02\x028:\x07V\x02\x0293\x03\x02\x02' +
    '\x0296\x03\x02\x02\x02:\b\x03\x02\x02\x02;<\x07,\x02\x02<\n\x03\x02\x02' +
    '\x02=>\x07-\x02\x02>\f\x03\x02\x02\x02?A\t\x02\x02\x02@?\x03\x02\x02\x02' +
    'AB\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x0E\x03\x02\x02' +
    '\x02DE\x07<\x02\x02E\x10\x03\x02\x02\x02FG\x07*\x02\x02G\x12\x03\x02\x02' +
    '\x02HI\x07+\x02\x02I\x14\x03\x02\x02\x02JK\x07p\x02\x02KL\x07c\x02\x02' +
    'LM\x07o\x02\x02MN\x07g\x02\x02N\x16\x03\x02\x02\x02OP\x07u\x02\x02PQ\x07' +
    'v\x02\x02QR\x07c\x02\x02RS\x07v\x02\x02ST\x07w\x02\x02TU\x07u\x02\x02' +
    'U\x18\x03\x02\x02\x02VW\x07u\x02\x02WX\x07k\x02\x02XY\x07p\x02\x02YZ\x07' +
    'm\x02\x02Z[\x07u\x02\x02[\x1A\x03\x02\x02\x02\\]\x07t\x02\x02]^\x07q\x02' +
    '\x02^_\x07q\x02\x02_`\x07v\x02\x02`a\x07u\x02\x02a\x1C\x03\x02\x02\x02' +
    'bf\x07$\x02\x02ce\n\x03\x02\x02dc\x03\x02\x02\x02eh\x03\x02\x02\x02fd' +
    '\x03\x02\x02\x02fg\x03\x02\x02\x02gi\x03\x02\x02\x02hf\x03\x02\x02\x02' +
    'ij\x07$\x02\x02j\x1E\x03\x02\x02\x02ko\t\x04\x02\x02ln\t\x05\x02\x02m' +
    'l\x03\x02\x02\x02nq\x03\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02\x02' +
    'p \x03\x02\x02\x02qo\x03\x02\x02\x02rv\t\x06\x02\x02su\t\x07\x02\x02t' +
    's\x03\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02' +
    'w"\x03\x02\x02\x02xv\x03\x02\x02\x02y{\t\b\x02\x02zy\x03\x02\x02\x02' +
    '{|\x03\x02\x02\x02|z\x03\x02\x02\x02|}\x03\x02\x02\x02}~\x03\x02\x02\x02' +
    '~\x7F\b\x12\x02\x02\x7F$\x03\x02\x02\x02\v\x02+19Bfov|\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!RunSelectionLexer.__ATN) {
      RunSelectionLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(RunSelectionLexer._serializedATN),
      );
    }

    return RunSelectionLexer.__ATN;
  }
}
