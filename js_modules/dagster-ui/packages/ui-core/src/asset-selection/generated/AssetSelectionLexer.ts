// Generated from /Users/marcosalazar/code/dagster/python_modules/dagster/dagster/_core/definitions/antlr_asset_selection/AssetSelection.g4 by ANTLR 4.9.0-SNAPSHOT

import {CharStream} from 'antlr4ts/CharStream';
import {Lexer} from 'antlr4ts/Lexer';
import {Vocabulary} from 'antlr4ts/Vocabulary';
import {VocabularyImpl} from 'antlr4ts/VocabularyImpl';
import {ATN} from 'antlr4ts/atn/ATN';
import {ATNDeserializer} from 'antlr4ts/atn/ATNDeserializer';
import {LexerATNSimulator} from 'antlr4ts/atn/LexerATNSimulator';
import * as Utils from 'antlr4ts/misc/Utils';

export class AssetSelectionLexer extends Lexer {
  public static readonly EQUAL = 1;
  public static readonly AND = 2;
  public static readonly OR = 3;
  public static readonly NOT = 4;
  public static readonly STAR = 5;
  public static readonly PLUS = 6;
  public static readonly DIGITS = 7;
  public static readonly COLON = 8;
  public static readonly LPAREN = 9;
  public static readonly RPAREN = 10;
  public static readonly COMMA = 11;
  public static readonly KEY = 12;
  public static readonly OWNER = 13;
  public static readonly GROUP = 14;
  public static readonly TAG = 15;
  public static readonly KIND = 16;
  public static readonly CODE_LOCATION = 17;
  public static readonly COLUMN = 18;
  public static readonly TABLE_NAME = 19;
  public static readonly COLUMN_TAG = 20;
  public static readonly CHANGED_IN_BRANCH = 21;
  public static readonly SINKS = 22;
  public static readonly ROOTS = 23;
  public static readonly QUOTED_STRING = 24;
  public static readonly UNQUOTED_STRING = 25;
  public static readonly UNQUOTED_WILDCARD_STRING = 26;
  public static readonly WS = 27;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'COLUMN',
    'TABLE_NAME',
    'COLUMN_TAG',
    'CHANGED_IN_BRANCH',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'='",
    undefined,
    undefined,
    undefined,
    "'*'",
    "'+'",
    undefined,
    "':'",
    "'('",
    "')'",
    "','",
    "'key'",
    "'owner'",
    "'group'",
    "'tag'",
    "'kind'",
    "'code_location'",
    "'column'",
    "'table_name'",
    "'column_tag'",
    "'changed_in_branch'",
    "'sinks'",
    "'roots'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'COLUMN',
    'TABLE_NAME',
    'COLUMN_TAG',
    'CHANGED_IN_BRANCH',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    AssetSelectionLexer._LITERAL_NAMES,
    AssetSelectionLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return AssetSelectionLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(AssetSelectionLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'AssetSelection.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return AssetSelectionLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return AssetSelectionLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return AssetSelectionLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return AssetSelectionLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1D\xE2\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05' +
    '\x03B\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04H\n\x04\x03\x05\x03' +
    '\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05P\n\x05\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x06\bW\n\b\r\b\x0E\bX\x03\t\x03\t\x03\n\x03\n\x03\v' +
    '\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03' +
    '\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03' +
    '\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03' +
    '\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03' +
    '\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03' +
    '\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03' +
    '\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03' +
    '\x18\x03\x19\x03\x19\x07\x19\xC7\n\x19\f\x19\x0E\x19\xCA\v\x19\x03\x19' +
    '\x03\x19\x03\x1A\x03\x1A\x07\x1A\xD0\n\x1A\f\x1A\x0E\x1A\xD3\v\x1A\x03' +
    '\x1B\x03\x1B\x07\x1B\xD7\n\x1B\f\x1B\x0E\x1B\xDA\v\x1B\x03\x1C\x06\x1C' +
    '\xDD\n\x1C\r\x1C\x0E\x1C\xDE\x03\x1C\x03\x1C\x02\x02\x02\x1D\x03\x02\x03' +
    '\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02' +
    '\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F' +
    "\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
    '/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D\x03\x02\t\x03\x022;\x06' +
    '\x02\f\f\x0F\x0F$$^^\x05\x02C\\aac|\x06\x021;C\\aac|\x06\x02,,C\\aac|' +
    '\x07\x02,,1;C\\aac|\x05\x02\v\f\x0F\x0F""\x02\xE9\x02\x03\x03\x02\x02' +
    '\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02' +
    '\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02' +
    '\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02' +
    '\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02' +
    '\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02' +
    "\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02)" +
    '\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02' +
    '\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02' +
    '\x027\x03\x02\x02\x02\x039\x03\x02\x02\x02\x05A\x03\x02\x02\x02\x07G\x03' +
    '\x02\x02\x02\tO\x03\x02\x02\x02\vQ\x03\x02\x02\x02\rS\x03\x02\x02\x02' +
    '\x0FV\x03\x02\x02\x02\x11Z\x03\x02\x02\x02\x13\\\x03\x02\x02\x02\x15^' +
    '\x03\x02\x02\x02\x17`\x03\x02\x02\x02\x19b\x03\x02\x02\x02\x1Bf\x03\x02' +
    '\x02\x02\x1Dl\x03\x02\x02\x02\x1Fr\x03\x02\x02\x02!v\x03\x02\x02\x02#' +
    "{\x03\x02\x02\x02%\x89\x03\x02\x02\x02'\x90\x03\x02\x02\x02)\x9B\x03" +
    '\x02\x02\x02+\xA6\x03\x02\x02\x02-\xB8\x03\x02\x02\x02/\xBE\x03\x02\x02' +
    '\x021\xC4\x03\x02\x02\x023\xCD\x03\x02\x02\x025\xD4\x03\x02\x02\x027\xDC' +
    '\x03\x02\x02\x029:\x07?\x02\x02:\x04\x03\x02\x02\x02;<\x07c\x02\x02<=' +
    '\x07p\x02\x02=B\x07f\x02\x02>?\x07C\x02\x02?@\x07P\x02\x02@B\x07F\x02' +
    '\x02A;\x03\x02\x02\x02A>\x03\x02\x02\x02B\x06\x03\x02\x02\x02CD\x07q\x02' +
    '\x02DH\x07t\x02\x02EF\x07Q\x02\x02FH\x07T\x02\x02GC\x03\x02\x02\x02GE' +
    '\x03\x02\x02\x02H\b\x03\x02\x02\x02IJ\x07p\x02\x02JK\x07q\x02\x02KP\x07' +
    'v\x02\x02LM\x07P\x02\x02MN\x07Q\x02\x02NP\x07V\x02\x02OI\x03\x02\x02\x02' +
    'OL\x03\x02\x02\x02P\n\x03\x02\x02\x02QR\x07,\x02\x02R\f\x03\x02\x02\x02' +
    'ST\x07-\x02\x02T\x0E\x03\x02\x02\x02UW\t\x02\x02\x02VU\x03\x02\x02\x02' +
    'WX\x03\x02\x02\x02XV\x03\x02\x02\x02XY\x03\x02\x02\x02Y\x10\x03\x02\x02' +
    '\x02Z[\x07<\x02\x02[\x12\x03\x02\x02\x02\\]\x07*\x02\x02]\x14\x03\x02' +
    '\x02\x02^_\x07+\x02\x02_\x16\x03\x02\x02\x02`a\x07.\x02\x02a\x18\x03\x02' +
    '\x02\x02bc\x07m\x02\x02cd\x07g\x02\x02de\x07{\x02\x02e\x1A\x03\x02\x02' +
    '\x02fg\x07q\x02\x02gh\x07y\x02\x02hi\x07p\x02\x02ij\x07g\x02\x02jk\x07' +
    't\x02\x02k\x1C\x03\x02\x02\x02lm\x07i\x02\x02mn\x07t\x02\x02no\x07q\x02' +
    '\x02op\x07w\x02\x02pq\x07r\x02\x02q\x1E\x03\x02\x02\x02rs\x07v\x02\x02' +
    'st\x07c\x02\x02tu\x07i\x02\x02u \x03\x02\x02\x02vw\x07m\x02\x02wx\x07' +
    'k\x02\x02xy\x07p\x02\x02yz\x07f\x02\x02z"\x03\x02\x02\x02{|\x07e\x02' +
    '\x02|}\x07q\x02\x02}~\x07f\x02\x02~\x7F\x07g\x02\x02\x7F\x80\x07a\x02' +
    '\x02\x80\x81\x07n\x02\x02\x81\x82\x07q\x02\x02\x82\x83\x07e\x02\x02\x83' +
    '\x84\x07c\x02\x02\x84\x85\x07v\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07' +
    'q\x02\x02\x87\x88\x07p\x02\x02\x88$\x03\x02\x02\x02\x89\x8A\x07e\x02\x02' +
    '\x8A\x8B\x07q\x02\x02\x8B\x8C\x07n\x02\x02\x8C\x8D\x07w\x02\x02\x8D\x8E' +
    '\x07o\x02\x02\x8E\x8F\x07p\x02\x02\x8F&\x03\x02\x02\x02\x90\x91\x07v\x02' +
    '\x02\x91\x92\x07c\x02\x02\x92\x93\x07d\x02\x02\x93\x94\x07n\x02\x02\x94' +
    '\x95\x07g\x02\x02\x95\x96\x07a\x02\x02\x96\x97\x07p\x02\x02\x97\x98\x07' +
    'c\x02\x02\x98\x99\x07o\x02\x02\x99\x9A\x07g\x02\x02\x9A(\x03\x02\x02\x02' +
    '\x9B\x9C\x07e\x02\x02\x9C\x9D\x07q\x02\x02\x9D\x9E\x07n\x02\x02\x9E\x9F' +
    '\x07w\x02\x02\x9F\xA0\x07o\x02\x02\xA0\xA1\x07p\x02\x02\xA1\xA2\x07a\x02' +
    '\x02\xA2\xA3\x07v\x02\x02\xA3\xA4\x07c\x02\x02\xA4\xA5\x07i\x02\x02\xA5' +
    '*\x03\x02\x02\x02\xA6\xA7\x07e\x02\x02\xA7\xA8\x07j\x02\x02\xA8\xA9\x07' +
    'c\x02\x02\xA9\xAA\x07p\x02\x02\xAA\xAB\x07i\x02\x02\xAB\xAC\x07g\x02\x02' +
    '\xAC\xAD\x07f\x02\x02\xAD\xAE\x07a\x02\x02\xAE\xAF\x07k\x02\x02\xAF\xB0' +
    '\x07p\x02\x02\xB0\xB1\x07a\x02\x02\xB1\xB2\x07d\x02\x02\xB2\xB3\x07t\x02' +
    '\x02\xB3\xB4\x07c\x02\x02\xB4\xB5\x07p\x02\x02\xB5\xB6\x07e\x02\x02\xB6' +
    '\xB7\x07j\x02\x02\xB7,\x03\x02\x02\x02\xB8\xB9\x07u\x02\x02\xB9\xBA\x07' +
    'k\x02\x02\xBA\xBB\x07p\x02\x02\xBB\xBC\x07m\x02\x02\xBC\xBD\x07u\x02\x02' +
    '\xBD.\x03\x02\x02\x02\xBE\xBF\x07t\x02\x02\xBF\xC0\x07q\x02\x02\xC0\xC1' +
    '\x07q\x02\x02\xC1\xC2\x07v\x02\x02\xC2\xC3\x07u\x02\x02\xC30\x03\x02\x02' +
    '\x02\xC4\xC8\x07$\x02\x02\xC5\xC7\n\x03\x02\x02\xC6\xC5\x03\x02\x02\x02' +
    '\xC7\xCA\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02' +
    '\xC9\xCB\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCB\xCC\x07$\x02\x02' +
    '\xCC2\x03\x02\x02\x02\xCD\xD1\t\x04\x02\x02\xCE\xD0\t\x05\x02\x02\xCF' +
    '\xCE\x03\x02\x02\x02\xD0\xD3\x03\x02\x02\x02\xD1\xCF\x03\x02\x02\x02\xD1' +
    '\xD2\x03\x02\x02\x02\xD24\x03\x02\x02\x02\xD3\xD1\x03\x02\x02\x02\xD4' +
    '\xD8\t\x06\x02\x02\xD5\xD7\t\x07\x02\x02\xD6\xD5\x03\x02\x02\x02\xD7\xDA' +
    '\x03\x02\x02\x02\xD8\xD6\x03\x02\x02\x02\xD8\xD9\x03\x02\x02\x02\xD96' +
    '\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02\xDB\xDD\t\b\x02\x02\xDC\xDB\x03' +
    '\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDF\x03' +
    '\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE1\b\x1C\x02\x02\xE18\x03\x02' +
    '\x02\x02\v\x02AGOX\xC8\xD1\xD8\xDE\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!AssetSelectionLexer.__ATN) {
      AssetSelectionLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(AssetSelectionLexer._serializedATN),
      );
    }

    return AssetSelectionLexer.__ATN;
  }
}
