// Generated from /Users/salazarm/code/dagster/python_modules/dagster/dagster/_core/definitions/antlr_asset_selection/AssetSelection.g4 by ANTLR 4.9.0-SNAPSHOT

import {CharStream} from 'antlr4ts/CharStream';
import {Lexer} from 'antlr4ts/Lexer';
import {Vocabulary} from 'antlr4ts/Vocabulary';
import {VocabularyImpl} from 'antlr4ts/VocabularyImpl';
import {ATN} from 'antlr4ts/atn/ATN';
import {ATNDeserializer} from 'antlr4ts/atn/ATNDeserializer';
import {LexerATNSimulator} from 'antlr4ts/atn/LexerATNSimulator';
import * as Utils from 'antlr4ts/misc/Utils';

export class AssetSelectionLexer extends Lexer {
  public static readonly EQUAL = 1;
  public static readonly AND = 2;
  public static readonly OR = 3;
  public static readonly NOT = 4;
  public static readonly STAR = 5;
  public static readonly PLUS = 6;
  public static readonly DIGITS = 7;
  public static readonly COLON = 8;
  public static readonly LPAREN = 9;
  public static readonly RPAREN = 10;
  public static readonly COMMA = 11;
  public static readonly KEY = 12;
  public static readonly OWNER = 13;
  public static readonly GROUP = 14;
  public static readonly TAG = 15;
  public static readonly KIND = 16;
  public static readonly CODE_LOCATION = 17;
  public static readonly STATUS = 18;
  public static readonly COLUMN = 19;
  public static readonly TABLE_NAME = 20;
  public static readonly COLUMN_TAG = 21;
  public static readonly CHANGED_IN_BRANCH = 22;
  public static readonly SINKS = 23;
  public static readonly ROOTS = 24;
  public static readonly QUOTED_STRING = 25;
  public static readonly UNQUOTED_STRING = 26;
  public static readonly UNQUOTED_WILDCARD_STRING = 27;
  public static readonly WS = 28;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'STATUS',
    'COLUMN',
    'TABLE_NAME',
    'COLUMN_TAG',
    'CHANGED_IN_BRANCH',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'='",
    undefined,
    undefined,
    undefined,
    "'*'",
    "'+'",
    undefined,
    "':'",
    "'('",
    "')'",
    "','",
    "'key'",
    "'owner'",
    "'group'",
    "'tag'",
    "'kind'",
    "'code_location'",
    "'status'",
    "'column'",
    "'table_name'",
    "'column_tag'",
    "'changed_in_branch'",
    "'sinks'",
    "'roots'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'STATUS',
    'COLUMN',
    'TABLE_NAME',
    'COLUMN_TAG',
    'CHANGED_IN_BRANCH',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'UNQUOTED_WILDCARD_STRING',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    AssetSelectionLexer._LITERAL_NAMES,
    AssetSelectionLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return AssetSelectionLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(AssetSelectionLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'AssetSelection.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return AssetSelectionLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return AssetSelectionLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return AssetSelectionLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return AssetSelectionLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1E\xEB\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03' +
    '\x03\x03\x03\x05\x03D\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04J\n' +
    '\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05R\n\x05\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x06\bY\n\b\r\b\x0E\bZ\x03\t\x03\t\x03' +
    '\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E' +
    '\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F' +
    '\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11' +
    '\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12' +
    '\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13' +
    '\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14' +
    '\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15' +
    '\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16' +
    '\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17' +
    '\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18' +
    '\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19' +
    '\x03\x1A\x03\x1A\x07\x1A\xD0\n\x1A\f\x1A\x0E\x1A\xD3\v\x1A\x03\x1A\x03' +
    '\x1A\x03\x1B\x03\x1B\x07\x1B\xD9\n\x1B\f\x1B\x0E\x1B\xDC\v\x1B\x03\x1C' +
    '\x03\x1C\x07\x1C\xE0\n\x1C\f\x1C\x0E\x1C\xE3\v\x1C\x03\x1D\x06\x1D\xE6' +
    '\n\x1D\r\x1D\x0E\x1D\xE7\x03\x1D\x03\x1D\x02\x02\x02\x1E\x03\x02\x03\x05' +
    '\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13' +
    '\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02' +
    "\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
    '\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E\x03\x02\t\x03\x02' +
    '2;\x06\x02\f\f\x0F\x0F$$^^\x05\x02C\\aac|\x06\x021;C\\aac|\x06\x02,,C' +
    '\\aac|\x07\x02,,1;C\\aac|\x05\x02\v\f\x0F\x0F""\x02\xF2\x02\x03\x03' +
    '\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03' +
    '\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02' +
    '\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02' +
    '\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02' +
    '\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02' +
    "\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02" +
    '\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03' +
    '\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02' +
    '\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x03;\x03\x02\x02\x02\x05' +
    'C\x03\x02\x02\x02\x07I\x03\x02\x02\x02\tQ\x03\x02\x02\x02\vS\x03\x02\x02' +
    '\x02\rU\x03\x02\x02\x02\x0FX\x03\x02\x02\x02\x11\\\x03\x02\x02\x02\x13' +
    '^\x03\x02\x02\x02\x15`\x03\x02\x02\x02\x17b\x03\x02\x02\x02\x19d\x03\x02' +
    '\x02\x02\x1Bh\x03\x02\x02\x02\x1Dn\x03\x02\x02\x02\x1Ft\x03\x02\x02\x02' +
    "!x\x03\x02\x02\x02#}\x03\x02\x02\x02%\x8B\x03\x02\x02\x02'\x92\x03\x02" +
    '\x02\x02)\x99\x03\x02\x02\x02+\xA4\x03\x02\x02\x02-\xAF\x03\x02\x02\x02' +
    '/\xC1\x03\x02\x02\x021\xC7\x03\x02\x02\x023\xCD\x03\x02\x02\x025\xD6\x03' +
    '\x02\x02\x027\xDD\x03\x02\x02\x029\xE5\x03\x02\x02\x02;<\x07?\x02\x02' +
    '<\x04\x03\x02\x02\x02=>\x07c\x02\x02>?\x07p\x02\x02?D\x07f\x02\x02@A\x07' +
    'C\x02\x02AB\x07P\x02\x02BD\x07F\x02\x02C=\x03\x02\x02\x02C@\x03\x02\x02' +
    '\x02D\x06\x03\x02\x02\x02EF\x07q\x02\x02FJ\x07t\x02\x02GH\x07Q\x02\x02' +
    'HJ\x07T\x02\x02IE\x03\x02\x02\x02IG\x03\x02\x02\x02J\b\x03\x02\x02\x02' +
    'KL\x07p\x02\x02LM\x07q\x02\x02MR\x07v\x02\x02NO\x07P\x02\x02OP\x07Q\x02' +
    '\x02PR\x07V\x02\x02QK\x03\x02\x02\x02QN\x03\x02\x02\x02R\n\x03\x02\x02' +
    '\x02ST\x07,\x02\x02T\f\x03\x02\x02\x02UV\x07-\x02\x02V\x0E\x03\x02\x02' +
    '\x02WY\t\x02\x02\x02XW\x03\x02\x02\x02YZ\x03\x02\x02\x02ZX\x03\x02\x02' +
    '\x02Z[\x03\x02\x02\x02[\x10\x03\x02\x02\x02\\]\x07<\x02\x02]\x12\x03\x02' +
    '\x02\x02^_\x07*\x02\x02_\x14\x03\x02\x02\x02`a\x07+\x02\x02a\x16\x03\x02' +
    '\x02\x02bc\x07.\x02\x02c\x18\x03\x02\x02\x02de\x07m\x02\x02ef\x07g\x02' +
    '\x02fg\x07{\x02\x02g\x1A\x03\x02\x02\x02hi\x07q\x02\x02ij\x07y\x02\x02' +
    'jk\x07p\x02\x02kl\x07g\x02\x02lm\x07t\x02\x02m\x1C\x03\x02\x02\x02no\x07' +
    'i\x02\x02op\x07t\x02\x02pq\x07q\x02\x02qr\x07w\x02\x02rs\x07r\x02\x02' +
    's\x1E\x03\x02\x02\x02tu\x07v\x02\x02uv\x07c\x02\x02vw\x07i\x02\x02w \x03' +
    '\x02\x02\x02xy\x07m\x02\x02yz\x07k\x02\x02z{\x07p\x02\x02{|\x07f\x02\x02' +
    '|"\x03\x02\x02\x02}~\x07e\x02\x02~\x7F\x07q\x02\x02\x7F\x80\x07f\x02' +
    '\x02\x80\x81\x07g\x02\x02\x81\x82\x07a\x02\x02\x82\x83\x07n\x02\x02\x83' +
    '\x84\x07q\x02\x02\x84\x85\x07e\x02\x02\x85\x86\x07c\x02\x02\x86\x87\x07' +
    'v\x02\x02\x87\x88\x07k\x02\x02\x88\x89\x07q\x02\x02\x89\x8A\x07p\x02\x02' +
    '\x8A$\x03\x02\x02\x02\x8B\x8C\x07u\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E' +
    '\x07c\x02\x02\x8E\x8F\x07v\x02\x02\x8F\x90\x07w\x02\x02\x90\x91\x07u\x02' +
    '\x02\x91&\x03\x02\x02\x02\x92\x93\x07e\x02\x02\x93\x94\x07q\x02\x02\x94' +
    '\x95\x07n\x02\x02\x95\x96\x07w\x02\x02\x96\x97\x07o\x02\x02\x97\x98\x07' +
    'p\x02\x02\x98(\x03\x02\x02\x02\x99\x9A\x07v\x02\x02\x9A\x9B\x07c\x02\x02' +
    '\x9B\x9C\x07d\x02\x02\x9C\x9D\x07n\x02\x02\x9D\x9E\x07g\x02\x02\x9E\x9F' +
    '\x07a\x02\x02\x9F\xA0\x07p\x02\x02\xA0\xA1\x07c\x02\x02\xA1\xA2\x07o\x02' +
    '\x02\xA2\xA3\x07g\x02\x02\xA3*\x03\x02\x02\x02\xA4\xA5\x07e\x02\x02\xA5' +
    '\xA6\x07q\x02\x02\xA6\xA7\x07n\x02\x02\xA7\xA8\x07w\x02\x02\xA8\xA9\x07' +
    'o\x02\x02\xA9\xAA\x07p\x02\x02\xAA\xAB\x07a\x02\x02\xAB\xAC\x07v\x02\x02' +
    '\xAC\xAD\x07c\x02\x02\xAD\xAE\x07i\x02\x02\xAE,\x03\x02\x02\x02\xAF\xB0' +
    '\x07e\x02\x02\xB0\xB1\x07j\x02\x02\xB1\xB2\x07c\x02\x02\xB2\xB3\x07p\x02' +
    '\x02\xB3\xB4\x07i\x02\x02\xB4\xB5\x07g\x02\x02\xB5\xB6\x07f\x02\x02\xB6' +
    '\xB7\x07a\x02\x02\xB7\xB8\x07k\x02\x02\xB8\xB9\x07p\x02\x02\xB9\xBA\x07' +
    'a\x02\x02\xBA\xBB\x07d\x02\x02\xBB\xBC\x07t\x02\x02\xBC\xBD\x07c\x02\x02' +
    '\xBD\xBE\x07p\x02\x02\xBE\xBF\x07e\x02\x02\xBF\xC0\x07j\x02\x02\xC0.\x03' +
    '\x02\x02\x02\xC1\xC2\x07u\x02\x02\xC2\xC3\x07k\x02\x02\xC3\xC4\x07p\x02' +
    '\x02\xC4\xC5\x07m\x02\x02\xC5\xC6\x07u\x02\x02\xC60\x03\x02\x02\x02\xC7' +
    '\xC8\x07t\x02\x02\xC8\xC9\x07q\x02\x02\xC9\xCA\x07q\x02\x02\xCA\xCB\x07' +
    'v\x02\x02\xCB\xCC\x07u\x02\x02\xCC2\x03\x02\x02\x02\xCD\xD1\x07$\x02\x02' +
    '\xCE\xD0\n\x03\x02\x02\xCF\xCE\x03\x02\x02\x02\xD0\xD3\x03\x02\x02\x02' +
    '\xD1\xCF\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD4\x03\x02\x02\x02' +
    '\xD3\xD1\x03\x02\x02\x02\xD4\xD5\x07$\x02\x02\xD54\x03\x02\x02\x02\xD6' +
    '\xDA\t\x04\x02\x02\xD7\xD9\t\x05\x02\x02\xD8\xD7\x03\x02\x02\x02\xD9\xDC' +
    '\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02\xDA\xDB\x03\x02\x02\x02\xDB6' +
    '\x03\x02\x02\x02\xDC\xDA\x03\x02\x02\x02\xDD\xE1\t\x06\x02\x02\xDE\xE0' +
    '\t\x07\x02\x02\xDF\xDE\x03\x02\x02\x02\xE0\xE3\x03\x02\x02\x02\xE1\xDF' +
    '\x03\x02\x02\x02\xE1\xE2\x03\x02\x02\x02\xE28\x03\x02\x02\x02\xE3\xE1' +
    '\x03\x02\x02\x02\xE4\xE6\t\b\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6\xE7\x03' +
    '\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8\xE9\x03' +
    '\x02\x02\x02\xE9\xEA\b\x1D\x02\x02\xEA:\x03\x02\x02\x02\v\x02CIQZ\xD1' +
    '\xDA\xE1\xE7\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!AssetSelectionLexer.__ATN) {
      AssetSelectionLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(AssetSelectionLexer._serializedATN),
      );
    }

    return AssetSelectionLexer.__ATN;
  }
}
