// Generated from /Users/marcosalazar/code/dagster/python_modules/dagster/dagster/_core/definitions/antlr_asset_selection/AssetSelection.g4 by ANTLR 4.9.0-SNAPSHOT

import {CharStream} from 'antlr4ts/CharStream';
import {Lexer} from 'antlr4ts/Lexer';
import {Vocabulary} from 'antlr4ts/Vocabulary';
import {VocabularyImpl} from 'antlr4ts/VocabularyImpl';
import {ATN} from 'antlr4ts/atn/ATN';
import {ATNDeserializer} from 'antlr4ts/atn/ATNDeserializer';
import {LexerATNSimulator} from 'antlr4ts/atn/LexerATNSimulator';
import * as Utils from 'antlr4ts/misc/Utils';

export class AssetSelectionLexer extends Lexer {
  public static readonly EQUAL = 1;
  public static readonly AND = 2;
  public static readonly OR = 3;
  public static readonly NOT = 4;
  public static readonly STAR = 5;
  public static readonly PLUS = 6;
  public static readonly DIGITS = 7;
  public static readonly COLON = 8;
  public static readonly LPAREN = 9;
  public static readonly RPAREN = 10;
  public static readonly COMMA = 11;
  public static readonly KEY = 12;
  public static readonly KEY_SUBSTRING = 13;
  public static readonly OWNER = 14;
  public static readonly GROUP = 15;
  public static readonly TAG = 16;
  public static readonly KIND = 17;
  public static readonly CODE_LOCATION = 18;
  public static readonly SINKS = 19;
  public static readonly ROOTS = 20;
  public static readonly QUOTED_STRING = 21;
  public static readonly UNQUOTED_STRING = 22;
  public static readonly WS = 23;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN'];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE'];

  public static readonly ruleNames: string[] = [
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'KEY_SUBSTRING',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'WS',
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'='",
    "'and'",
    "'or'",
    "'not'",
    "'*'",
    "'+'",
    undefined,
    "':'",
    "'('",
    "')'",
    "','",
    "'key'",
    "'key_substring'",
    "'owner'",
    "'group'",
    "'tag'",
    "'kind'",
    "'code_location'",
    "'sinks'",
    "'roots'",
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'EQUAL',
    'AND',
    'OR',
    'NOT',
    'STAR',
    'PLUS',
    'DIGITS',
    'COLON',
    'LPAREN',
    'RPAREN',
    'COMMA',
    'KEY',
    'KEY_SUBSTRING',
    'OWNER',
    'GROUP',
    'TAG',
    'KIND',
    'CODE_LOCATION',
    'SINKS',
    'ROOTS',
    'QUOTED_STRING',
    'UNQUOTED_STRING',
    'WS',
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    AssetSelectionLexer._LITERAL_NAMES,
    AssetSelectionLexer._SYMBOLIC_NAMES,
    [],
  );

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return AssetSelectionLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(AssetSelectionLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string {
    return 'AssetSelection.g4';
  }

  // @Override
  public get ruleNames(): string[] {
    return AssetSelectionLexer.ruleNames;
  }

  // @Override
  public get serializedATN(): string {
    return AssetSelectionLexer._serializedATN;
  }

  // @Override
  public get channelNames(): string[] {
    return AssetSelectionLexer.channelNames;
  }

  // @Override
  public get modeNames(): string[] {
    return AssetSelectionLexer.modeNames;
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\xA7\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03' +
    '\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
    '\x07\x03\x07\x03\b\x06\bD\n\b\r\b\x0E\bE\x03\t\x03\t\x03\n\x03\n\x03\v' +
    '\x03\v\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03' +
    '\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03' +
    '\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03' +
    '\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03' +
    '\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03' +
    '\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03' +
    '\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03' +
    '\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x07\x16\x93\n\x16\f\x16\x0E' +
    '\x16\x96\v\x16\x03\x16\x03\x16\x03\x17\x03\x17\x07\x17\x9C\n\x17\f\x17' +
    '\x0E\x17\x9F\v\x17\x03\x18\x06\x18\xA2\n\x18\r\x18\x0E\x18\xA3\x03\x18' +
    '\x03\x18\x02\x02\x02\x19\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06' +
    '\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19' +
    '\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14' +
    "'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19\x03\x02\x07\x03\x022;\x06" +
    '\x02\f\f\x0F\x0F$$^^\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02\v\f\x0F\x0F' +
    '""\x02\xAA\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03' +
    '\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02' +
    '\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02' +
    '\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02' +
    '\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02' +
    '\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02' +
    "\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
    '\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x031\x03\x02\x02\x02\x053\x03\x02' +
    '\x02\x02\x077\x03\x02\x02\x02\t:\x03\x02\x02\x02\v>\x03\x02\x02\x02\r' +
    '@\x03\x02\x02\x02\x0FC\x03\x02\x02\x02\x11G\x03\x02\x02\x02\x13I\x03\x02' +
    '\x02\x02\x15K\x03\x02\x02\x02\x17M\x03\x02\x02\x02\x19O\x03\x02\x02\x02' +
    '\x1BS\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fg\x03\x02\x02\x02!m\x03' +
    "\x02\x02\x02#q\x03\x02\x02\x02%v\x03\x02\x02\x02'\x84\x03\x02\x02\x02" +
    ')\x8A\x03\x02\x02\x02+\x90\x03\x02\x02\x02-\x99\x03\x02\x02\x02/\xA1\x03' +
    '\x02\x02\x0212\x07?\x02\x022\x04\x03\x02\x02\x0234\x07c\x02\x0245\x07' +
    'p\x02\x0256\x07f\x02\x026\x06\x03\x02\x02\x0278\x07q\x02\x0289\x07t\x02' +
    '\x029\b\x03\x02\x02\x02:;\x07p\x02\x02;<\x07q\x02\x02<=\x07v\x02\x02=' +
    '\n\x03\x02\x02\x02>?\x07,\x02\x02?\f\x03\x02\x02\x02@A\x07-\x02\x02A\x0E' +
    '\x03\x02\x02\x02BD\t\x02\x02\x02CB\x03\x02\x02\x02DE\x03\x02\x02\x02E' +
    'C\x03\x02\x02\x02EF\x03\x02\x02\x02F\x10\x03\x02\x02\x02GH\x07<\x02\x02' +
    'H\x12\x03\x02\x02\x02IJ\x07*\x02\x02J\x14\x03\x02\x02\x02KL\x07+\x02\x02' +
    'L\x16\x03\x02\x02\x02MN\x07.\x02\x02N\x18\x03\x02\x02\x02OP\x07m\x02\x02' +
    'PQ\x07g\x02\x02QR\x07{\x02\x02R\x1A\x03\x02\x02\x02ST\x07m\x02\x02TU\x07' +
    'g\x02\x02UV\x07{\x02\x02VW\x07a\x02\x02WX\x07u\x02\x02XY\x07w\x02\x02' +
    'YZ\x07d\x02\x02Z[\x07u\x02\x02[\\\x07v\x02\x02\\]\x07t\x02\x02]^\x07k' +
    '\x02\x02^_\x07p\x02\x02_`\x07i\x02\x02`\x1C\x03\x02\x02\x02ab\x07q\x02' +
    '\x02bc\x07y\x02\x02cd\x07p\x02\x02de\x07g\x02\x02ef\x07t\x02\x02f\x1E' +
    '\x03\x02\x02\x02gh\x07i\x02\x02hi\x07t\x02\x02ij\x07q\x02\x02jk\x07w\x02' +
    '\x02kl\x07r\x02\x02l \x03\x02\x02\x02mn\x07v\x02\x02no\x07c\x02\x02op' +
    '\x07i\x02\x02p"\x03\x02\x02\x02qr\x07m\x02\x02rs\x07k\x02\x02st\x07p' +
    '\x02\x02tu\x07f\x02\x02u$\x03\x02\x02\x02vw\x07e\x02\x02wx\x07q\x02\x02' +
    'xy\x07f\x02\x02yz\x07g\x02\x02z{\x07a\x02\x02{|\x07n\x02\x02|}\x07q\x02' +
    '\x02}~\x07e\x02\x02~\x7F\x07c\x02\x02\x7F\x80\x07v\x02\x02\x80\x81\x07' +
    'k\x02\x02\x81\x82\x07q\x02\x02\x82\x83\x07p\x02\x02\x83&\x03\x02\x02\x02' +
    '\x84\x85\x07u\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07p\x02\x02\x87\x88' +
    '\x07m\x02\x02\x88\x89\x07u\x02\x02\x89(\x03\x02\x02\x02\x8A\x8B\x07t\x02' +
    '\x02\x8B\x8C\x07q\x02\x02\x8C\x8D\x07q\x02\x02\x8D\x8E\x07v\x02\x02\x8E' +
    '\x8F\x07u\x02\x02\x8F*\x03\x02\x02\x02\x90\x94\x07$\x02\x02\x91\x93\n' +
    '\x03\x02\x02\x92\x91\x03\x02\x02\x02\x93\x96\x03\x02\x02\x02\x94\x92\x03' +
    '\x02\x02\x02\x94\x95\x03\x02\x02\x02\x95\x97\x03\x02\x02\x02\x96\x94\x03' +
    '\x02\x02\x02\x97\x98\x07$\x02\x02\x98,\x03\x02\x02\x02\x99\x9D\t\x04\x02' +
    '\x02\x9A\x9C\t\x05\x02\x02\x9B\x9A\x03\x02\x02\x02\x9C\x9F\x03\x02\x02' +
    '\x02\x9D\x9B\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E.\x03\x02\x02' +
    '\x02\x9F\x9D\x03\x02\x02\x02\xA0\xA2\t\x06\x02\x02\xA1\xA0\x03\x02\x02' +
    '\x02\xA2\xA3\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA3\xA4\x03\x02\x02' +
    '\x02\xA4\xA5\x03\x02\x02\x02\xA5\xA6\b\x18\x02\x02\xA60\x03\x02\x02\x02' +
    '\x07\x02E\x94\x9D\xA3\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!AssetSelectionLexer.__ATN) {
      AssetSelectionLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(AssetSelectionLexer._serializedATN),
      );
    }

    return AssetSelectionLexer.__ATN;
  }
}
