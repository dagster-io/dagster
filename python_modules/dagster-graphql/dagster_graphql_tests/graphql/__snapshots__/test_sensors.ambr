# serializer version: 1
# name: TestSensors.test_get_sensor[0]
  dict({
    '__typename': 'Sensor',
    'assetSelection': None,
    'metadataEntries': list([
      dict({
        'label': 'foo',
        'text': 'bar',
      }),
    ]),
    'minIntervalSeconds': 30,
    'name': 'always_no_config_sensor_with_tags_and_metadata',
    'nextTick': None,
    'sensorState': dict({
      'runs': list([
      ]),
      'runsCount': 0,
      'status': 'STOPPED',
      'ticks': list([
      ]),
    }),
    'sensorType': 'STANDARD',
    'tags': list([
      dict({
        'key': 'foo',
        'value': 'bar',
      }),
    ]),
    'targets': list([
      dict({
        'mode': 'default',
        'pipelineName': 'no_config_job',
        'solidSelection': None,
      }),
    ]),
  })
# ---
# name: TestSensors.test_get_sensors[0]
  list([
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'always_error_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'always_no_config_sensor_with_tags_and_metadata',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 60,
      'name': 'custom_interval_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'dynamic_partition_requesting_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'dynamic_partitioned_assets_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'every_asset_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': '__ASSET_JOB',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'invalid_asset_selection_error',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': '__ASSET_JOB',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'jobless_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': '__anonymous_asset_job_jobless_sensor',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'logging_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'many_asset_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'single_asset_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'multi_no_config_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'my_auto_materialize_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': '__ASSET_JOB',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'never_no_config_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'once_no_config_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'owned_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'owned_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'run_key_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'run_status',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'running_in_code_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'RUNNING',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'single_asset_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'single_asset_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'stopped_in_code_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'the_failure_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'unowned_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'unowned_job',
          'solidSelection': None,
        }),
      ]),
    }),
    dict({
      'description': None,
      'minIntervalSeconds': 30,
      'name': 'update_cursor_sensor',
      'sensorState': dict({
        'runs': list([
        ]),
        'runsCount': 0,
        'status': 'STOPPED',
        'ticks': list([
        ]),
      }),
      'targets': list([
        dict({
          'mode': 'default',
          'pipelineName': 'no_config_job',
          'solidSelection': None,
        }),
      ]),
    }),
  ])
# ---
# name: TestSensors.test_get_sensors_filtered[0]
  list([
    dict({
      'name': 'running_in_code_sensor',
      'sensorState': dict({
        'status': 'RUNNING',
      }),
    }),
  ])
# ---
