# serializer version: 1
# name: TestAssetAwareEventLog.test_all_asset_keys[0]
  dict({
    'assetsOrError': dict({
      '__typename': 'AssetConnection',
      'cursor': '["yield_partition_materialization"]',
      'nodes': list([
        dict({
          'id': '["a"]',
          'key': dict({
            'path': list([
              'a',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_1"]',
          'key': dict({
            'path': list([
              'asset_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_2"]',
          'key': dict({
            'path': list([
              'asset_2',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_3"]',
          'key': dict({
            'path': list([
              'asset_3',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_one"]',
          'key': dict({
            'path': list([
              'asset_one',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_two"]',
          'key': dict({
            'path': list([
              'asset_two',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_with_automation_condition"]',
          'key': dict({
            'path': list([
              'asset_with_automation_condition',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_with_custom_automation_condition"]',
          'key': dict({
            'path': list([
              'asset_with_custom_automation_condition',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["asset_yields_observation"]',
          'key': dict({
            'path': list([
              'asset_yields_observation',
            ]),
          }),
        }),
        dict({
          'id': '["b"]',
          'key': dict({
            'path': list([
              'b',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["bar"]',
          'key': dict({
            'path': list([
              'bar',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["baz"]',
          'key': dict({
            'path': list([
              'baz',
            ]),
          }),
        }),
        dict({
          'id': '["c"]',
          'key': dict({
            'path': list([
              'c',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["check_in_op_asset"]',
          'key': dict({
            'path': list([
              'check_in_op_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["concurrency_asset"]',
          'key': dict({
            'path': list([
              'concurrency_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["concurrency_graph_asset"]',
          'key': dict({
            'path': list([
              'concurrency_graph_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["concurrency_multi_asset_1"]',
          'key': dict({
            'path': list([
              'concurrency_multi_asset_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["concurrency_multi_asset_2"]',
          'key': dict({
            'path': list([
              'concurrency_multi_asset_2',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["diamond_source"]',
          'key': dict({
            'path': list([
              'diamond_source',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["downstream_asset"]',
          'key': dict({
            'path': list([
              'downstream_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["downstream_dynamic_partitioned_asset"]',
          'key': dict({
            'path': list([
              'downstream_dynamic_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["downstream_static_partitioned_asset"]',
          'key': dict({
            'path': list([
              'downstream_static_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["downstream_time_partitioned_asset"]',
          'key': dict({
            'path': list([
              'downstream_time_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["downstream_weekly_partitioned_asset"]',
          'key': dict({
            'path': list([
              'downstream_weekly_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["dummy_source_asset"]',
          'key': dict({
            'path': list([
              'dummy_source_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["dynamic_in_multipartitions_fail"]',
          'key': dict({
            'path': list([
              'dynamic_in_multipartitions_fail',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["dynamic_in_multipartitions_success"]',
          'key': dict({
            'path': list([
              'dynamic_in_multipartitions_success',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["executable_asset"]',
          'key': dict({
            'path': list([
              'executable_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fail_partition_materialization"]',
          'key': dict({
            'path': list([
              'fail_partition_materialization',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["first_asset"]',
          'key': dict({
            'path': list([
              'first_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["first_kinds_key"]',
          'key': dict({
            'path': list([
              'first_kinds_key',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["foo"]',
          'key': dict({
            'path': list([
              'foo',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["foo_bar"]',
          'key': dict({
            'path': list([
              'foo_bar',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fourth_kinds_key"]',
          'key': dict({
            'path': list([
              'fourth_kinds_key',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fresh_diamond_bottom"]',
          'key': dict({
            'path': list([
              'fresh_diamond_bottom',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fresh_diamond_left"]',
          'key': dict({
            'path': list([
              'fresh_diamond_left',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fresh_diamond_right"]',
          'key': dict({
            'path': list([
              'fresh_diamond_right',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["fresh_diamond_top"]',
          'key': dict({
            'path': list([
              'fresh_diamond_top',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["grouped_asset_1"]',
          'key': dict({
            'path': list([
              'grouped_asset_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["grouped_asset_2"]',
          'key': dict({
            'path': list([
              'grouped_asset_2',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["grouped_asset_4"]',
          'key': dict({
            'path': list([
              'grouped_asset_4',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["hanging_asset"]',
          'key': dict({
            'path': list([
              'hanging_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["hanging_graph"]',
          'key': dict({
            'path': list([
              'hanging_graph',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["hanging_partition_asset"]',
          'key': dict({
            'path': list([
              'hanging_partition_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["int_asset"]',
          'key': dict({
            'path': list([
              'int_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["integers_asset"]',
          'key': dict({
            'path': list([
              'integers_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["middle_static_partitioned_asset_1"]',
          'key': dict({
            'path': list([
              'middle_static_partitioned_asset_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["middle_static_partitioned_asset_2"]',
          'key': dict({
            'path': list([
              'middle_static_partitioned_asset_2',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["multi_run_backfill_policy_asset"]',
          'key': dict({
            'path': list([
              'multi_run_backfill_policy_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["multipartitions_1"]',
          'key': dict({
            'path': list([
              'multipartitions_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["multipartitions_2"]',
          'key': dict({
            'path': list([
              'multipartitions_2',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["multipartitions_fail"]',
          'key': dict({
            'path': list([
              'multipartitions_fail',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["never_runs_asset"]',
          'key': dict({
            'path': list([
              'never_runs_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["no_multipartitions_1"]',
          'key': dict({
            'path': list([
              'no_multipartitions_1',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["not_included_asset"]',
          'key': dict({
            'path': list([
              'not_included_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["one"]',
          'key': dict({
            'path': list([
              'one',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["output_then_hang_asset"]',
          'key': dict({
            'path': list([
              'output_then_hang_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["second_kinds_key"]',
          'key': dict({
            'path': list([
              'second_kinds_key',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["single_run_backfill_policy_asset"]',
          'key': dict({
            'path': list([
              'single_run_backfill_policy_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["str_asset"]',
          'key': dict({
            'path': list([
              'str_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["third_kinds_key"]',
          'key': dict({
            'path': list([
              'third_kinds_key',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["two"]',
          'key': dict({
            'path': list([
              'two',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["typed_asset"]',
          'key': dict({
            'path': list([
              'typed_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["unconnected"]',
          'key': dict({
            'path': list([
              'unconnected',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["unexecutable_asset"]',
          'key': dict({
            'path': list([
              'unexecutable_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["ungrouped_asset_3"]',
          'key': dict({
            'path': list([
              'ungrouped_asset_3',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["ungrouped_asset_5"]',
          'key': dict({
            'path': list([
              'ungrouped_asset_5',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["unpartitioned_upstream_of_partitioned"]',
          'key': dict({
            'path': list([
              'unpartitioned_upstream_of_partitioned',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["untyped_asset"]',
          'key': dict({
            'path': list([
              'untyped_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["upstream_daily_partitioned_asset"]',
          'key': dict({
            'path': list([
              'upstream_daily_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["upstream_dynamic_partitioned_asset"]',
          'key': dict({
            'path': list([
              'upstream_dynamic_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["upstream_static_partitioned_asset"]',
          'key': dict({
            'path': list([
              'upstream_static_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["upstream_time_partitioned_asset"]',
          'key': dict({
            'path': list([
              'upstream_time_partitioned_asset',
            ]),
          }),
        }),
        dict({
          'id': 'test_location.test_repo.["yield_partition_materialization"]',
          'key': dict({
            'path': list([
              'yield_partition_materialization',
            ]),
          }),
        }),
      ]),
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_asset_op[0]
  dict({
    'assetOrError': dict({
      'definition': dict({
        'op': dict({
          'description': None,
          'inputDefinitions': list([
            dict({
              'name': 'asset_one',
            }),
          ]),
          'name': 'asset_two',
          'outputDefinitions': list([
            dict({
              'name': 'result',
            }),
          ]),
        }),
      }),
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_freshness_info[0]
  dict({
    'assetNodes': list([
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_2"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_3"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_one"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_two"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_with_automation_condition"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_with_custom_automation_condition"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["asset_yields_observation"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["bar"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["baz"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["check_in_op_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["concurrency_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["concurrency_graph_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["concurrency_multi_asset_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["concurrency_multi_asset_2"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["diamond_source"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["downstream_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["downstream_dynamic_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["downstream_static_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["downstream_time_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["downstream_weekly_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["dummy_source_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["dynamic_in_multipartitions_fail"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["dynamic_in_multipartitions_success"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["executable_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["fail_partition_materialization"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["first_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["first_kinds_key"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["foo"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["foo_bar"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["fourth_kinds_key"]',
      }),
      dict({
        'freshnessInfo': dict({
          'currentMinutesLate': 0.0,
          'latestMaterializationMinutesLate': None,
        }),
        'freshnessPolicy': dict({
          'cronSchedule': None,
          'maximumLagMinutes': 30.0,
        }),
        'id': 'test_location.test_repo.["fresh_diamond_bottom"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["fresh_diamond_left"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["fresh_diamond_right"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["fresh_diamond_top"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["grouped_asset_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["grouped_asset_2"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["grouped_asset_4"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["hanging_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["hanging_graph"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["hanging_partition_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["int_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["integers_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["middle_static_partitioned_asset_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["middle_static_partitioned_asset_2"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["multi_run_backfill_policy_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["multipartitions_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["multipartitions_2"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["multipartitions_fail"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["never_runs_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["no_multipartitions_1"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["not_included_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["one"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["output_then_hang_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["second_kinds_key"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["single_run_backfill_policy_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["str_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["third_kinds_key"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["two"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["typed_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["unconnected"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["unexecutable_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["ungrouped_asset_3"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["ungrouped_asset_5"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["unpartitioned_upstream_of_partitioned"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["untyped_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["upstream_daily_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["upstream_dynamic_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["upstream_static_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["upstream_time_partitioned_asset"]',
      }),
      dict({
        'freshnessInfo': None,
        'freshnessPolicy': None,
        'id': 'test_location.test_repo.["yield_partition_materialization"]',
      }),
    ]),
  })
# ---
# name: TestAssetAwareEventLog.test_get_asset_key_materialization[0]
  dict({
    'assetOrError': dict({
      'assetMaterializations': list([
        dict({
          'assetLineage': list([
          ]),
          'label': 'a',
        }),
      ]),
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_get_asset_key_not_found[0]
  dict({
    'assetOrError': dict({
      '__typename': 'AssetNotFoundError',
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_get_partitioned_asset_key_materialization[0]
  dict({
    'assetOrError': dict({
      'assetMaterializations': list([
        dict({
          'label': 'a',
          'partition': 'partition_1',
        }),
      ]),
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_get_run_materialization[0]
  dict({
    'runsOrError': dict({
      'results': list([
        dict({
          'assetMaterializations': list([
            dict({
              'assetKey': dict({
                'path': list([
                  'a',
                ]),
              }),
            }),
          ]),
        }),
      ]),
    }),
  })
# ---
# name: TestAssetAwareEventLog.test_op_assets[0]
  dict({
    'repositoryOrError': dict({
      'usedSolid': dict({
        'definition': dict({
          'assetNodes': list([
            dict({
              'assetKey': dict({
                'path': list([
                  'asset_two',
                ]),
              }),
            }),
          ]),
        }),
      }),
    }),
  })
# ---
