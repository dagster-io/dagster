"""Hardcoded exclude lists for public API validation.

This file contains all the symbols that are known to have @public API inconsistencies.
These lists allow incremental fixing while preventing new issues from being introduced.

DO NOT EDIT THE EXCLUDE_MISSING_PUBLIC LIST BY HAND - it is generated automatically.
To update it, run the generation script and replace the entire set.
"""

# Symbols marked @public but not yet documented in RST files
EXCLUDE_MISSING_RST = {
    # Components system - new functionality being developed
    "dagster.components.definitions.definitions",
    "dagster.components.core.load_defs.build_defs_for_component",
    "dagster.components.core.load_defs.load_from_defs_folder",
    "dagster.components.core.defs_module.DefsFolderComponent",
    "dagster.components.core.context.ComponentDeclLoadContext",
    "dagster.components.core.context.ComponentLoadContext",
    "dagster.components.component.component_loader.component",
    "dagster.components.component.component_loader.component_instance",
    "dagster.components.component.component.ComponentTypeSpec",
    "dagster.components.component.component.Component",
    "dagster.components.resolved.model.Model",
    "dagster.components.resolved.model.Resolver",
    "dagster.components.resolved.context.ResolutionContext",
    "dagster.components.resolved.base.Resolvable",
    "dagster.components.scaffold.scaffold.scaffold_with",
    "dagster.components.scaffold.scaffold.ScaffoldRequest",
    "dagster.components.scaffold.scaffold.Scaffolder",
    "dagster.components.lib.sql_component.sql_component.SqlComponent",
    "dagster.components.core.tree.ComponentTree",
    # Core internal functionality
    "dagster._core.definitions.definitions_class.create_repository_using_definitions_args",
    # Library pipes clients
    "dagster_aws.pipes.clients.emr_containers.PipesEMRContainersClient",
    "dagster_aws.pipes.clients.emr.PipesEMRClient",
    "dagster_aws.pipes.clients.emr_serverless.PipesEMRServerlessClient",
    "dagster_gcp.pipes.clients.dataproc_job.PipesDataprocJobClient",
    # Library resources
    "dagster_openai.resources.with_usage_metadata",
    "dagster_openai.resources.OpenAIResource",
    "dagster_sling.SlingMode",
    "dagster_sling.resources.SlingConnectionResource",
    # New public APIs missing RST documentation
    "dagster.build_defs_for_component",
    "dagster.ComponentTypeSpec",
    "dagster.scaffold_with",
    "dagster.ScaffoldRequest",
    "dagster.Scaffolder",
    "dagster.SqlComponent",
    # Library components
    "dagster_snowflake.components.sql_component.component.SnowflakeConnectionComponentBase",
}

# Symbols marked @public but not exported at top-level
EXCLUDE_MISSING_EXPORT = {
    # These are internal symbols that should either be exported or have @public removed
    "dagster._core.definitions.definitions_class.create_repository_using_definitions_args",
    "dagster.components.core.load_defs.build_defs_for_component",
    "dagster.components.core.load_defs.load_from_defs_folder",
    "dagster.components.core.defs_module.DefsFolderComponent",
    "dagster.components.core.context.ComponentDeclLoadContext",
    "dagster.components.core.context.ComponentLoadContext",
    "dagster.components.component.component_loader.component",
    "dagster.components.component.component_loader.component_instance",
    "dagster.components.component.component.ComponentTypeSpec",
    "dagster.components.component.component.Component",
    "dagster.components.resolved.model.Model",
    "dagster.components.resolved.model.Resolver",
    "dagster.components.resolved.context.ResolutionContext",
    "dagster.components.resolved.base.Resolvable",
    "dagster.components.scaffold.scaffold.scaffold_with",
    "dagster.components.scaffold.scaffold.ScaffoldRequest",
    "dagster.components.scaffold.scaffold.Scaffolder",
}

# Hardcoded list of all RST symbols missing @public decorators
# Generated automatically - do not edit by hand
EXCLUDE_MISSING_PUBLIC = {
    "dagster_snowflake_pandas.SnowflakePandasTypeHandler",
    "dagster_powerbi.PowerBIServicePrincipal",
    "dagster_powerbi.PowerBIToken",
    "dagster_powerbi.PowerBIWorkspace",
    "dagster_powerbi.DagsterPowerBITranslator",
    "dagster_powerbi.load_powerbi_asset_specs",
    "dagster_powerbi.build_semantic_model_refresh_asset_definition",
    "dagster_duckdb_pandas.DuckDBPandasTypeHandler",
    "dagster_spark.SparkOpError",
    "dagster_spark.define_spark_config",
    "dagster_spark.create_spark_op",
    "dagster_spark.construct_spark_shell_command",
    "dagster_pipes.PipesContext",
    "dagster_pipes.PipesContextLoader",
    "dagster_pipes.PipesDefaultContextLoader",
    "dagster_pipes.PipesS3ContextLoader",
    "dagster_pipes.PipesGCSContextLoader",
    "dagster_pipes.PipesDbfsContextLoader",
    "dagster_pipes.PipesParamsLoader",
    "dagster_pipes.PipesEnvVarParamsLoader",
    "dagster_pipes.PipesCliArgsParamsLoader",
    "dagster_pipes.PipesMappingParamsLoader",
    "dagster_pipes.PipesMessageWriter",
    "dagster_pipes.PipesDefaultMessageWriter",
    "dagster_pipes.PipesBlobStoreMessageWriter",
    "dagster_pipes.PipesS3MessageWriter",
    "dagster_pipes.PipesGCSMessageWriter",
    "dagster_pipes.PipesDbfsMessageWriter",
    "dagster_pipes.PipesMessageWriterChannel",
    "dagster_pipes.PipesBlobStoreMessageWriterChannel",
    "dagster_pipes.PipesBufferedFilesystemMessageWriterChannel",
    "dagster_pipes.PipesFileMessageWriterChannel",
    "dagster_pipes.PipesStreamMessageWriterChannel",
    "dagster_pipes.PipesS3MessageWriterChannel",
    "dagster_pipes.PipesGCSMessageWriterChannel",
    "dagster_pipes.DagsterPipesError",
    "dagster_pipes.DagsterPipesWarning",
    "dagster_pipes.open_dagster_pipes",
    "dagster_pipes.encode_env_var",
    "dagster_pipes.decode_env_var",
    "dagster_snowflake_pyspark.SnowflakePySparkTypeHandler",
    "dagster_pandera.pandera_schema_to_dagster_type",
    "dagstermill.ConfigurableLocalOutputNotebookIOManager",
    "dagstermill.DagstermillExecutionContext",
    "dagstermill.DagstermillError",
    "dagstermill.define_dagstermill_asset",
    "dagstermill.define_dagstermill_op",
    "dagstermill.get_context",
    "dagstermill.yield_event",
    "dagstermill.yield_result",
    "dagster_dlt.DagsterDltTranslator",
    "dagster_dlt.DagsterDltResource",
    "dagster_dlt.build_dlt_asset_specs",
    "dagster_dlt.dlt_assets",
    "dagster_sigma.SigmaOrganization",
    "dagster_sigma.SigmaBaseUrl",
    "dagster_sigma.DagsterSigmaTranslator",
    "dagster_sigma.SigmaDataset",
    "dagster_sigma.SigmaWorkbook",
    "dagster_sigma.SigmaFilter",
    "dagster_sigma.load_sigma_asset_specs",
    "dagster_ssh.SSHResource",
    "dagster_looker.LookerResource",
    "dagster_looker.DagsterLookerApiTranslator",
    "dagster_looker.LookerStructureData",
    "dagster_looker.LookerStructureType",
    "dagster_looker.RequestStartPdtBuild",
    "dagster_looker.LookerFilter",
    "dagster_looker.DagsterLookerLkmlTranslator",
    "dagster_looker.load_looker_asset_specs",
    "dagster_looker.build_looker_pdt_assets_definitions",
    "dagster_looker.build_looker_asset_specs",
    "dagster_tableau.TableauCloudWorkspace",
    "dagster_tableau.TableauServerWorkspace",
    "dagster_tableau.DagsterTableauTranslator",
    "dagster_tableau.load_tableau_asset_specs",
    "dagster_tableau.build_tableau_materializable_assets_definition",
    "dagster_tableau.parse_tableau_external_and_materializable_asset_specs",
    "dagster_tableau.tableau_assets",
    "dagster_gcp_pyspark.BigQueryPySparkTypeHandler",
    "dagster_k8s.PipesK8sClient",
    "dagster_k8s.PipesK8sPodLogsMessageReader",
    "dagster_k8s.execute_k8s_job",
    "dagster_deltalake_polars.DeltaLakePolarsTypeHandler",
    "dagster_airbyte.AirbyteCloudWorkspace",
    "dagster_airbyte.DagsterAirbyteTranslator",
    "dagster_airbyte.load_airbyte_cloud_asset_specs",
    "dagster_airbyte.build_airbyte_assets_definitions",
    "dagster_airbyte.load_assets_from_airbyte_instance",
    "dagster_airbyte.build_airbyte_assets",
    "dagster_airbyte.airbyte_assets",
    "dagster_airlift.AirflowInstance",
    "dagster_airlift.AirflowAuthBackend",
    "dagster_airlift.AirflowBasicAuthBackend",
    "dagster_airlift.DagSelectorFn",
    "dagster_airlift.DagsterEventTransformerFn",
    "dagster_airlift.TaskHandleDict",
    "dagster_airlift.DagInfo",
    "dagster_airlift.AirflowDefinitionsData",
    "dagster_airlift.AirflowInstanceComponent",
    "dagster_airlift.MwaaSessionAuthBackend",
    "dagster_airlift.BaseDagsterAssetsOperator",
    "dagster_airlift.AirflowProxiedState",
    "dagster_airlift.DagProxiedState",
    "dagster_airlift.TaskProxiedState",
    "dagster_airlift.BaseProxyTaskToDagsterOperator",
    "dagster_airlift.DefaultProxyTaskToDagsterOperator",
    "dagster_airlift.BaseProxyDAGToDagsterOperator",
    "dagster_airlift.DefaultProxyDAGToDagsterOperator",
    "dagster_airlift.build_defs_from_airflow_instance",
    "dagster_airlift.assets_with_task_mappings",
    "dagster_airlift.assets_with_dag_mappings",
    "dagster_airlift.assets_with_multiple_task_mappings",
    "dagster_airlift.proxying_to_dagster",
    "dagster_airlift.load_proxied_state_from_yaml",
    "dagster_azure.blob.AzureBlobComputeLogManager",
    "dagster_azure.adls2.ADLS2FileHandle",
    "dagster_snowflake_polars.SnowflakePolarsIOManager",
    "dagster_snowflake_polars.SnowflakePolarsTypeHandler",
    "dagster_snowflake_polars.snowflake_polars_io_manager",
    "dagster_duckdb_polars.DuckDBPolarsTypeHandler",
    "dagster_github.GithubClient",
    "dagster_prometheus.resources.PrometheusClient",
    "dagster_databricks.DatabricksClient",
    "dagster_databricks.PipesDatabricksClient",
    "dagster_databricks.PipesDbfsContextInjector",
    "dagster_databricks.PipesDbfsMessageReader",
    "dagster_databricks.PipesDbfsLogReader",
    "dagster_databricks.DatabricksError",
    "dagster_databricks.create_databricks_run_now_op",
    "dagster_databricks.create_databricks_submit_run_op",
    "dagster_wandb.WandbArtifactConfiguration",
    "dagster_wandb.SerializationModule",
    "dagster_wandb.run_launch_agent",
    "dagster_wandb.run_launch_job",
    "dagster_census.CensusResource",
    "dagster_census.CensusOutput",
    "dagster_aws.s3.S3ComputeLogManager",
    "dagster_aws.s3.S3FileHandle",
    "dagster_aws.emr.EmrJobRunner",
    "dagster_aws.emr.EmrError",
    "dagster_aws.ssm.ParameterStoreTag",
    "dagster_aws.pipes.PipesS3ContextInjector",
    "dagster_aws.pipes.PipesLambdaEventContextInjector",
    "dagster_aws.pipes.PipesS3MessageReader",
    "dagster_aws.pipes.PipesCloudWatchMessageReader",
    "dagster_aws.pipes.PipesLambdaClient",
    "dagster_aws.pipes.PipesGlueClient",
    "dagster_aws.pipes.PipesECSClient",
    "dagster_aws.pipes.PipesEMRClient",
    "dagster_aws.pipes.PipesEMRContainersClient",
    "dagster_aws.pipes.PipesEMRServerlessClient",
    "dagster_gcp.BigQueryError",
    "dagster_gcp.GCSFileHandle",
    "dagster_gcp.gcs.GCSComputeLogManager",
    "dagster_gcp.pipes.PipesDataprocJobClient",
    "dagster_gcp.pipes.PipesGCSContextInjector",
    "dagster_gcp.pipes.PipesGCSMessageReader",
    "dagster_gcp.bq_create_dataset",
    "dagster_gcp.bq_delete_dataset",
    "dagster_gcp.bq_op_for_queries",
    "dagster_gcp.import_df_to_bq",
    "dagster_gcp.import_file_to_bq",
    "dagster_gcp.import_gcs_paths_to_bq",
    "dagster_gcp.fetch_last_updated_timestamps",
    "dagster_gcp.gcs.sensor.get_gcs_keys",
    "dagster_iceberg.config.IcebergCatalogConfig",
    "dagster_iceberg.io_manager.base.IcebergIOManager",
    "dagster_iceberg.handler.IcebergBaseTypeHandler",
    "dagster_gcp_pandas.BigQueryPandasTypeHandler",
    "dagster_mysql.MySQLEventLogStorage",
    "dagster_mysql.MySQLRunStorage",
    "dagster_mysql.MySQLScheduleStorage",
    "dagster_snowflake.SnowflakeConnection",
    "dagster_snowflake.fetch_last_updated_timestamps",
    "dagster_snowflake.snowflake_op_for_query",
    "dagster_deltalake_pandas.DeltaLakePandasTypeHandler",
    "dagster_openai.OpenAIResource",
    "dagster_openai.with_usage_metadata",
    "dagster_ge.ge_validation_op_factory",
    "dagster_slack.make_slack_on_run_failure_sensor",
    "dagster_docker.PipesDockerClient",
    "dagster_docker.PipesDockerLogsMessageReader",
    "dagster_docker.execute_docker_container",
    "dagster_sling.DagsterSlingTranslator",
    "dagster_sling.SlingResource",
    "dagster_sling.SlingConnectionResource",
    "dagster_sling.sling_assets",
    "dagster_pandas.RowCountConstraint",
    "dagster_pandas.StrictColumnsConstraint",
    "dagster_pandas.PandasColumn",
    "dagster_pandas.create_dagster_pandas_dataframe_type",
    "dagster_msteams.make_teams_on_run_failure_sensor",
    "dagster_dbt.DagsterDbtTranslator",
    "dagster_dbt.DagsterDbtTranslatorSettings",
    "dagster_dbt.DbtManifestAssetSelection",
    "dagster_dbt.DbtProject",
    "dagster_dbt.DbtCliResource",
    "dagster_dbt.DbtCliInvocation",
    "dagster_dbt.core.dbt_cli_invocation.DbtEventIterator",
    "dagster_dbt.DbtCliEventMessage",
    "dagster_dbt.DbtCloudClientResource",
    "dagster_dbt.build_dbt_asset_selection",
    "dagster_dbt.build_schedule_from_dbt_selection",
    "dagster_dbt.get_asset_key_for_model",
    "dagster_dbt.get_asset_key_for_source",
    "dagster_dbt.get_asset_keys_by_output_name_for_source",
    "dagster_dbt.build_freshness_checks_from_dbt_assets",
    "dagster_dbt.load_assets_from_dbt_cloud_job",
    "dagster_dbt.default_group_from_dbt_resource_props",
    "dagster_dbt.group_from_dbt_resource_props_fallback_to_directory",
    "dagster_dbt.default_metadata_from_dbt_resource_props",
    "dagster_dbt.dbt_assets",
    "dagster_duckdb_pyspark.DuckDBPySparkTypeHandler",
    "dagster_fivetran.FivetranWorkspace",
    "dagster_fivetran.DagsterFivetranTranslator",
    "dagster_fivetran.fivetran_event_iterator.FivetranEventIterator",
    "dagster_fivetran.ConnectorSelectorFn",
    "dagster_fivetran.load_fivetran_asset_specs",
    "dagster_fivetran.build_fivetran_assets_definitions",
    "dagster_fivetran.load_assets_from_fivetran_instance",
    "dagster_fivetran.build_fivetran_assets",
    "dagster_fivetran.fivetran_assets",
    "dagster_graphql.DagsterGraphQLClient",
    "dagster_graphql.InvalidOutputErrorInfo",
    "dagster_graphql.ReloadRepositoryLocationInfo",
    "dagster_graphql.ReloadRepositoryLocationStatus",
    "dagster.HookDefinition",
    "dagster.HookContext",
    "dagster.build_hook_context",
    "dagster.success_hook",
    "dagster.failure_hook",
    "dagster.MetadataValue",
    "dagster.MetadataEntry",
    "dagster.DagsterAssetMetadataValue",
    "dagster.DagsterRunMetadataValue",
    "dagster.FloatMetadataValue",
    "dagster.IntMetadataValue",
    "dagster.JsonMetadataValue",
    "dagster.MarkdownMetadataValue",
    "dagster.PathMetadataValue",
    "dagster.NotebookMetadataValue",
    "dagster.PythonArtifactMetadataValue",
    "dagster.TableColumnLineageMetadataValue",
    "dagster.TableMetadataValue",
    "dagster.TableSchemaMetadataValue",
    "dagster.TextMetadataValue",
    "dagster.TimestampMetadataValue",
    "dagster.UrlMetadataValue",
    "dagster.CodeReferencesMetadataValue",
    "dagster.TableRecord",
    "dagster.TableSchema",
    "dagster.TableConstraints",
    "dagster.TableColumn",
    "dagster.TableColumnConstraints",
    "dagster.TableColumnLineage",
    "dagster.TableColumnDep",
    "dagster.FilePathMapping",
    "dagster.AnchorBasedFilePathMapping",
    "dagster.with_source_code_references",
    "dagster.link_code_references_to_git",
    "dagster.PipesSession",
    "dagster.PipesClient",
    "dagster.PipesSubprocessClient",
    "dagster.PipesContextInjector",
    "dagster.PipesEnvContextInjector",
    "dagster.PipesFileContextInjector",
    "dagster.PipesTempFileContextInjector",
    "dagster.PipesMessageReader",
    "dagster.PipesBlobStoreMessageReader",
    "dagster.PipesFileMessageReader",
    "dagster.PipesTempFileMessageReader",
    "dagster.PipesMessageHandler",
    "dagster.open_pipes_session",
    "dagster.Config",
    "dagster.PermissiveConfig",
    "dagster.RunConfig",
    "dagster.ConfigSchema",
    "dagster.Field",
    "dagster.Selector",
    "dagster.Permissive",
    "dagster.Shape",
    "dagster.Map",
    "dagster.Array",
    "dagster.Noneable",
    "dagster.Enum",
    "dagster.EnumValue",
    "dagster.ScalarUnion",
    "dagster.ConfigMapping",
    "dagster.configured",
    "dagster.JobDefinition",
    "dagster.ReexecutionOptions",
    "dagster.GraphDefinition",
    "dagster.ExecuteInProcessResult",
    "dagster.JobExecutionResult",
    "dagster.DagsterEvent",
    "dagster.DagsterEventType",
    "dagster.reconstructable",
    "dagster.AssetExecutionContext",
    "dagster.OpExecutionContext",
    "dagster.materialize",
    "dagster.materialize_to_memory",
    "dagster.execute_job",
    "dagster.instance_for_test",
    "dagster.build_op_context",
    "dagster.build_asset_context",
    "dagster.build_asset_check_context",
    "dagster.validate_run_config",
    "dagster.PartitionsDefinition",
    "dagster.HourlyPartitionsDefinition",
    "dagster.DailyPartitionsDefinition",
    "dagster.WeeklyPartitionsDefinition",
    "dagster.MonthlyPartitionsDefinition",
    "dagster.TimeWindowPartitionsDefinition",
    "dagster.TimeWindow",
    "dagster.StaticPartitionsDefinition",
    "dagster.MultiPartitionsDefinition",
    "dagster.MultiPartitionKey",
    "dagster.DynamicPartitionsDefinition",
    "dagster.PartitionKeyRange",
    "dagster.PartitionMapping",
    "dagster.TimeWindowPartitionMapping",
    "dagster.IdentityPartitionMapping",
    "dagster.AllPartitionMapping",
    "dagster.LastPartitionMapping",
    "dagster.StaticPartitionMapping",
    "dagster.SpecificPartitionsPartitionMapping",
    "dagster.MultiToSingleDimensionPartitionMapping",
    "dagster.MultiPartitionMapping",
    "dagster.BackfillPolicy",
    "dagster.PartitionedConfig",
    "dagster.build_schedule_from_partitioned_job",
    "dagster.static_partitioned_config",
    "dagster.dynamic_partitioned_config",
    "dagster.hourly_partitioned_config",
    "dagster.daily_partitioned_config",
    "dagster.weekly_partitioned_config",
    "dagster.monthly_partitioned_config",
    "dagster.AssetCheckResult",
    "dagster.AssetCheckSpec",
    "dagster.AssetCheckSeverity",
    "dagster.AssetCheckKey",
    "dagster.AssetChecksDefinition",
    "dagster.load_asset_checks_from_modules",
    "dagster.load_asset_checks_from_current_module",
    "dagster.load_asset_checks_from_package_module",
    "dagster.load_asset_checks_from_package_name",
    "dagster.build_last_update_freshness_checks",
    "dagster.build_time_partition_freshness_checks",
    "dagster.build_sensor_for_freshness_checks",
    "dagster.build_column_schema_change_checks",
    "dagster.build_metadata_bounds_checks",
    "dagster.asset_check",
    "dagster.multi_asset_check",
    "dagster.PreviewWarning",
    "dagster.BetaWarning",
    "dagster.SupersessionWarning",
    "dagster.ForkedPdb",
    "dagster.file_relative_path",
    "dagster.config_from_files",
    "dagster.config_from_pkg_resources",
    "dagster.config_from_yaml_strings",
    "dagster.get_dagster_logger",
    "dagster.make_email_on_run_failure_sensor",
    "dagster.DynamicOut",
    "dagster.DynamicOutput",
    "dagster.GraphDefinition",
    "dagster.GraphIn",
    "dagster.GraphOut",
    "dagster.DependencyDefinition",
    "dagster.MultiDependencyDefinition",
    "dagster.NodeInvocation",
    "dagster.OutputMapping",
    "dagster.InputMapping",
    "dagster.graph",
    "dagster.ConfigurableResource",
    "dagster.ResourceDefinition",
    "dagster.InitResourceContext",
    "dagster.EnvVar",
    "dagster.make_values_resource",
    "dagster.build_init_resource_context",
    "dagster.build_resources",
    "dagster.with_resources",
    "dagster.resource",
    "dagster.RunRequest",
    "dagster.SkipReason",
    "dagster.ScheduleDefinition",
    "dagster.ScheduleEvaluationContext",
    "dagster.SensorDefinition",
    "dagster.SensorEvaluationContext",
    "dagster.AssetSensorDefinition",
    "dagster.MultiAssetSensorDefinition",
    "dagster.RunStatusSensorDefinition",
    "dagster.RunStatusSensorContext",
    "dagster.RunFailureSensorContext",
    "dagster.JobSelector",
    "dagster.RepositorySelector",
    "dagster.SensorResult",
    "dagster.AddDynamicPartitionsRequest",
    "dagster.DeleteDynamicPartitionsRequest",
    "dagster.build_schedule_context",
    "dagster.build_schedule_from_partitioned_job",
    "dagster.build_sensor_context",
    "dagster.build_run_status_sensor_context",
    "dagster.schedule",
    "dagster.sensor",
    "dagster.asset_sensor",
    "dagster.multi_asset_sensor",
    "dagster.run_status_sensor",
    "dagster.run_failure_sensor",
    "dagster.DagsterLogManager",
    "dagster.LoggerDefinition",
    "dagster.InitLoggerContext",
    "dagster.colored_console_logger",
    "dagster.json_console_logger",
    "dagster.build_init_logger_context",
    "dagster.logger",
    "dagster.JobDefinition",
    "dagster.reconstructable",
    "dagster.build_reconstructable_job",
    "dagster.job",
    "dagster.ComponentLoadContext",
    "dagster.Component",
    "dagster.Resolvable",
    "dagster.ResolutionContext",
    "dagster.Resolver",
    "dagster.Model",
    "dagster.DefsFolderComponent",
    "dagster.load_from_defs_folder",
    "dagster.component_instance",
    "dagster.ComponentTree",
    "dagster.Definitions",
    "dagster.create_repository_using_definitions_args",
    "dagster.load_definitions_from_current_module",
    "dagster.load_definitions_from_module",
    "dagster.load_definitions_from_modules",
    "dagster.load_definitions_from_package_module",
    "dagster.load_definitions_from_package_name",
    "dagster.definitions",
    "dagster.MaterializeResult",
    "dagster.AssetSpec",
    "dagster.AssetsDefinition",
    "dagster.AssetKey",
    "dagster.AssetOut",
    "dagster.SourceAsset",
    "dagster.ObserveResult",
    "dagster.AssetDep",
    "dagster.AssetIn",
    "dagster.AssetSelection",
    "dagster.AssetObservation",
    "dagster.AutomationCondition",
    "dagster.AutomationResult",
    "dagster.AutomationConditionSensorDefinition",
    "dagster.AssetValueLoader",
    "dagster.map_asset_specs",
    "dagster.define_asset_job",
    "dagster.load_assets_from_modules",
    "dagster.load_assets_from_current_module",
    "dagster.load_assets_from_package_module",
    "dagster.load_assets_from_package_name",
    "dagster.asset",
    "dagster.graph_asset",
    "dagster.graph_multi_asset",
    "dagster.multi_asset",
    "dagster.multi_observable_source_asset",
    "dagster.observable_source_asset",
    "dagster.RepositoryDefinition",
    "dagster.RepositoryData",
    "dagster.DagsterType",
    "dagster.DagsterTypeLoader",
    "dagster.DagsterTypeLoaderContext",
    "dagster.PythonObjectDagsterType",
    "dagster.dagster_type_loader",
    "dagster.usable_as_dagster_type",
    "dagster.make_python_type_usable_as_dagster_type",
    "dagster.check_dagster_type",
    "dagster.ConfigurableIOManager",
    "dagster.ConfigurableIOManagerFactory",
    "dagster.IOManager",
    "dagster.IOManagerDefinition",
    "dagster.InputContext",
    "dagster.OutputContext",
    "dagster.UPathIOManager",
    "dagster.InputManager",
    "dagster.InputManagerDefinition",
    "dagster.build_input_context",
    "dagster.build_output_context",
    "dagster.io_manager",
    "dagster.input_manager",
    "dagster.ExecutorDefinition",
    "dagster.InitExecutorContext",
    "dagster.Executor",
    "dagster.FileManager",
    "dagster.FileHandle",
    "dagster.LocalFileHandle",
    "dagster.DagsterInstance",
    "dagster.InstanceRef",
    "dagster.ConfigurableClass",
    "dagster.ConfigurableClassData",
    "dagster.LocalArtifactStorage",
    "dagster.DagsterStorage",
    "dagster.DagsterRun",
    "dagster.DagsterRunStatus",
    "dagster.RunsFilter",
    "dagster.RunStorage",
    "dagster.SqlRunStorage",
    "dagster.SqliteRunStorage",
    "dagster.RunRecord",
    "dagster.EventLogEntry",
    "dagster.EventLogRecord",
    "dagster.EventRecordsFilter",
    "dagster.RunShardedEventsCursor",
    "dagster.EventLogStorage",
    "dagster.SqlEventLogStorage",
    "dagster.SqliteEventLogStorage",
    "dagster.ConsolidatedSqliteEventLogStorage",
    "dagster.AssetRecord",
    "dagster.ComputeLogManager",
    "dagster.LocalComputeLogManager",
    "dagster.NoOpComputeLogManager",
    "dagster.RunLauncher",
    "dagster.DefaultRunLauncher",
    "dagster.DefaultRunCoordinator",
    "dagster.Scheduler",
    "dagster.ScheduleStorage",
    "dagster.SqlScheduleStorage",
    "dagster.SqliteScheduleStorage",
    "dagster.StepLauncher",
    "dagster.StepRunRef",
    "dagster.StepExecutionContext",
    "dagster.user_code_error_boundary",
    "dagster.executor",
    "dagster.OpDefinition",
    "dagster.In",
    "dagster.Out",
    "dagster.RetryPolicy",
    "dagster.Backoff",
    "dagster.Jitter",
    "dagster.Output",
    "dagster.AssetMaterialization",
    "dagster.ExpectationResult",
    "dagster.TypeCheck",
    "dagster.Failure",
    "dagster.RetryRequested",
    "dagster.op",
}
# Total: 546 symbols

# Modules to exclude from @public scanning
EXCLUDE_MODULES_FROM_PUBLIC_SCAN = set()

# RST files to exclude from symbol extraction
EXCLUDE_RST_FILES = set()
