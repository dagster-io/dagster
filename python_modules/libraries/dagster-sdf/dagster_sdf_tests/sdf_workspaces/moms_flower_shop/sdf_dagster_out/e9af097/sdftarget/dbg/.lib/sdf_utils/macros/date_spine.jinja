{#
    Macro: date_spine(datepart, start_date, end_date)

    This macro generates a SQL SELECT statement that produces a single column of dates. 
    The dates are generated for each day in the range from the 'from' date to the 'to' date, where from is inclusive and to is not inclusive.

    Parameters:
    - datepart: The date part to increment. This can be one of the following: 'day', 'week', 'month', 'quarter', 'year'. Others like hour, minute, second are dialect-specific and supported in Snowflake for example.
    - start_date: The start date of the range, as a SQL Date object. The best dialect-agnostic way is to pass "CAST('2019-01-01' AS DATE)" for example.
    - end_date: The noninclusive end date of the range, as a SQL Date object. The best dialect-agnostic way is to pass "CAST('2019-01-01' AS DATE)" for example.
    - start_date_raw: The start date of the range, as a string in 'YYYY-MM-DD' format.
    - end_date_raw: The end date of the range, as a string in 'YYYY-MM-DD' format.

    Returns:
    A SQL SELECT statement that produces a table with a single column of dates.

    Example usage:
    WITH date_spine AS (
        {{ 
            sdf_utils.date_spine(
                datepart = 'day',
                start_date = "CAST('2019-01-01' AS DATE)",    
                end_date = "CAST('2019-12-31' AS DATE)"
            )
        }}
    )
    

    This will generate:
    WITH date_spine AS (
        WITH
        intervals_list AS (
            SELECT 
                ARRAY_GENERATE_RANGE(
                    0, 
                    DATEDIFF(day, CAST('2019-01-01' AS DATE), CAST('2019-12-31' AS DATE)) + 1
                ) AS i
        )

        SELECT 
            DATEADD(day, i.VALUE, CAST('2019-01-01' AS DATE)) AS date_spine
        FROM intervals_list l, LATERAL FLATTEN(input => l.i) i
    )
#}


{%- macro date_spine(datepart, start_date, end_date, start_date_raw=none, end_date_raw=none) -%}
{%- if builtin.dialect == 'snowflake' -%}
    {{ snowflake_date_spine(datepart, start_date, end_date, start_date_raw, end_date_raw) }}
{%- elif builtin.dialect == 'bigquery' -%}
{{ log('BigQuery is not yet supported for the date_spine macro. Consider contributing this to the open source utils repo: https://github.com/sdf-labs/utils') }}
{%- elif builtin.dialect == 'trino' -%}
{{ log('Trino is not yet supported for the date_spine macro. Consider contributing this to the open source utils repo: https://github.com/sdf-labs/utils') }}
{%- elif builtin.dialect == 'redshift' -%}
{{ log('Redshift is not yet supported for the date_spine macro. Consider contributing this to the open source utils repo: https://github.com/sdf-labs/utils') }}
{%- elif builtin.dialect == 'postgres' -%}
{{ log('Postgres is not yet supported for the date_spine macro. Consider contributing this to the open source utils repo: https://github.com/sdf-labs/utils') }}
{%- endif -%}
{%- endmacro -%}

{# Dialect Specific Utilities and Implementations #}

{# Snowflake #}
{%- macro snowflake_date_spine(datepart, start_date, end_date, start_date_raw, end_date_raw) -%}
WITH
intervals_list AS (
    SELECT 
        ARRAY_GENERATE_RANGE(
            0, 
            {% if start_date_raw is not none and end_date_raw is not none -%}
            DATEDIFF({{ datepart }}, '{{ start_date_raw }}'::DATE, '{{ end_date_raw }}'::DATE) + 1
            {%- else -%}
            DATEDIFF({{ datepart }}, {{ start_date }}, {{ end_date }}) + 1
            {%- endif -%}
        ) AS i
)

SELECT 
    {% if start_date_raw is not none and end_date_raw is not none -%}
    DATEADD('{{ datepart }}', i.VALUE, '{{ start_date_raw }}'::DATE) AS date_spine
    {%- else -%}
    DATEADD({{ datepart }}, i.VALUE, {{ start_date }}) AS date_spine
    {%- endif %}
FROM intervals_list l, LATERAL FLATTEN(input => l.i) i
{%- endmacro -%}


