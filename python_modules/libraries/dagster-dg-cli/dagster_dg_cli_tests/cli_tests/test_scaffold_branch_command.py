import subprocess
from unittest.mock import Mock, patch

import click
import pytest
from dagster_dg_core_tests.utils import ProxyRunner, assert_runner_result


def test_scaffold_branch_command_success():
    """Test successful branch creation with all steps."""
    with ProxyRunner.test() as runner:
        # Mock the subprocess calls to simulate git and gh commands
        with (
            patch("dagster_dg_cli.cli.scaffold.branch._run_git_command") as mock_git,
            patch("dagster_dg_cli.cli.scaffold.branch._run_gh_command") as mock_gh,
        ):
            # Mock git checkout -b command
            mock_git.return_value = Mock(returncode=0, stdout="", stderr="")

            # Mock gh pr create command
            mock_gh.return_value = Mock(
                returncode=0,
                stdout="https://github.com/user/repo/pull/123",
                stderr="",
            )

            result = runner.invoke("scaffold", "branch", "my-feature-branch")
            assert_runner_result(result)

            # Verify git commands were called in correct order
            expected_git_calls = [
                (["checkout", "-b", "my-feature-branch"],),
                (["commit", "--allow-empty", "-m", "Initial commit for my-feature-branch branch"],),
                (["push", "-u", "origin", "my-feature-branch"],),
            ]

            actual_git_calls = [call[0] for call in mock_git.call_args_list]
            assert actual_git_calls == expected_git_calls

            # Verify gh command was called correctly
            mock_gh.assert_called_once_with(
                [
                    "pr",
                    "create",
                    "--title",
                    "my-feature-branch",
                    "--body",
                    "This pull request was generated by the Dagster `dg` CLI for branch 'my-feature-branch'.",
                ]
            )

            # Check output messages
            assert "Creating new branch: my-feature-branch" in result.output
            assert "Created and checked out new branch: my-feature-branch" in result.output
            assert (
                "Created empty commit: Initial commit for my-feature-branch branch" in result.output
            )
            assert "Pushed branch my-feature-branch to remote" in result.output
            assert "Created pull request: https://github.com/user/repo/pull/123" in result.output
            assert (
                "âœ… Successfully created branch and pull request: https://github.com/user/repo/pull/123"
                in result.output
            )


def test_scaffold_branch_command_whitespace_branch_name():
    """Test that branch name is properly stripped of whitespace."""
    with ProxyRunner.test() as runner:
        with (
            patch("dagster_dg_cli.cli.scaffold.branch._run_git_command") as mock_git,
            patch("dagster_dg_cli.cli.scaffold.branch._run_gh_command") as mock_gh,
        ):
            mock_git.return_value = Mock(returncode=0, stdout="", stderr="")
            mock_gh.return_value = Mock(
                returncode=0,
                stdout="https://github.com/user/repo/pull/123",
                stderr="",
            )

            result = runner.invoke("scaffold", "branch", "  my-branch  ")
            assert_runner_result(result)

            # Verify the stripped branch name was used
            first_git_call = mock_git.call_args_list[0][0][0]
            assert first_git_call == ["checkout", "-b", "my-branch"]


def test_run_git_command_git_not_found():
    """Test _run_git_command when git is not installed."""
    from dagster_dg_cli.cli.scaffold.branch import _run_git_command

    with patch("subprocess.run", side_effect=FileNotFoundError):
        with pytest.raises(click.ClickException, match="git command not found"):
            _run_git_command(["status"])


def test_run_gh_command_gh_not_found():
    """Test _run_gh_command when gh is not installed."""
    from dagster_dg_cli.cli.scaffold.branch import _run_gh_command

    with patch("subprocess.run", side_effect=FileNotFoundError):
        with pytest.raises(click.ClickException, match="gh command not found"):
            _run_gh_command(["pr", "list"])


def test_run_gh_command_command_fails():
    """Test _run_gh_command when gh command fails."""
    from dagster_dg_cli.cli.scaffold.branch import _run_gh_command

    with patch("subprocess.run") as mock_run:
        error = subprocess.CalledProcessError(1, "gh pr create")
        error.stderr = "error: not authenticated with GitHub"
        error.stdout = ""
        mock_run.side_effect = error

        with pytest.raises(
            click.ClickException, match="gh command failed: error: not authenticated with GitHub"
        ):
            _run_gh_command(["pr", "create"])
