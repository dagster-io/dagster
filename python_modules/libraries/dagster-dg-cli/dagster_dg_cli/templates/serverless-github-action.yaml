name: Dagster Cloud Serverless Deployment
on:
  push:
    branches:
      - "main"
      - "master"
  pull_request:
    types: [opened, synchronize, reopened, closed]

concurrency:
  # Cancel in-progress deploys to same branch
  group: ${{ github.ref }}/deploy
  cancel-in-progress: true
env:
  DAGSTER_CLOUD_API_TOKEN: ${{ secrets.DAGSTER_CLOUD_API_TOKEN }}
  ENABLE_FAST_DEPLOYS: "true"
  PYTHON_VERSION: "3.10"
  DAGSTER_CLOUD_FILE: "dagster_cloud.yaml"
  DAGSTER_CLOUD_ORGANIZATION: "TEMPLATE_ORGANIZATION_NAME"
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  dagster_cloud_default_deploy:
    name: Dagster Serverless Deploy
    runs-on: ubuntu-22.04

    steps:
      - name: Prerun Checks
        id: prerun
        uses: dagster-io/dagster-cloud-action/actions/utils/prerun@v0.1

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Detect if this is branch deployment and initialize the build session
      - name: Initialize build session
        id: ci-init
        uses: dagster-io/dagster-cloud-action/actions/utils/dg-deploy-init@dg-v0.1
        with:
          project_dir: ${{ env.DAGSTER_CLOUD_YAML_PATH }}
          # A full deployment name. If this run is for a pull request, this value will be used as
          # the base deployment for the branch deployment.
          deployment: "TEMPLATE_DEFAULT_DEPLOYMENT_NAME"

      # If using fast build, build the PEX
      # First ensure the correct Python version is installed
      - name: Set up Python ${{ env.PYTHON_VERSION }} for target
        id: setup-python-version
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install setuptools
        if: steps.prerun.outputs.result == 'pex-deploy'
        run: ${{ steps.setup-python-version.outputs.python-path }} -m pip install setuptools
        shell: bash

      - name: Run PEX build
        id: run-pex-build
        if: steps.prerun.outputs.result == 'pex-deploy'
        uses: dagster-io/dagster-cloud-action/actions/utils/dg-cli@dg-v0.1
        with:
          command: "plus build-and-push --build-strategy=python-executable --python-version ${{ env.PYTHON_VERSION }}  --pex-deps-cache-from='${{ github.repository }}' --pex-deps-cache-to='${{ github.repository }}'"

      # Otherwise, enable buildx for caching and build the Docker image
      - name: Set up Docker Buildx
        if: steps.prerun.outputs.result == 'docker-deploy'
        uses: docker/setup-buildx-action@v2

      - name: Run Docker build
        id: run-docker-build
        if: steps.prerun.outputs.result == 'docker-deploy'
        uses: dagster-io/dagster-cloud-action/actions/utils/dg-cli@dg-v0.1
        with:
          command: "plus deploy build-and-push --build-strategy=docker --python-version ${{ env.PYTHON_VERSION }}"

      # Deploy all code locations in this build session to Dagster Cloud
      - name: Deploy to Dagster Cloud
        id: ci-deploy
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dg-cli@dg-v0.1
        with:
          command: "plus deploy finish"

      # Update a PR comment - this runs always() so the comment is updated on success and failure
      - name: Update PR comment for branch deployments
        id: ci-notify
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci notify --project-dir=${{ env.DAGSTER_CLOUD_YAML_PATH }}"

      # Generate a summary that shows up on the Workflow Summary page
      - name: Generate a summary
        id: ci-summary
        if: steps.prerun.outputs.result != 'skip'
        uses: dagster-io/dagster-cloud-action/actions/utils/dagster-cloud-cli@v0.1
        with:
          command: "ci status --output-format=markdown >> $GITHUB_STEP_SUMMARY"
