{
  "frontmatter": {
    "id": "dbt-dbt-core",
    "status": "published",
    "name": "dbt",
    "title": "Dagster & dbt",
    "excerpt": "Put your dbt transformations to work, directly from within Dagster.",
    "partnerlink": "https://www.getdbt.com/",
    "categories": ["ETL"],
    "enabledBy": [],
    "enables": [],
    "tags": ["dagster-supported", "etl"]
  },
  "logoFilename": "dbt.svg",
  "content": "Dagster orchestrates dbt alongside other technologies, so you can schedule dbt with Spark, Python, etc. in a single data pipeline.\n\nDagster assets understand dbt at the level of individual dbt models. This means that you can:\n\n- Use Dagster's UI or APIs to run subsets of your dbt models, seeds, and snapshots.\n- Track failures, logs, and run history for individual dbt models, seeds, and snapshots.\n- Define dependencies between individual dbt models and other data assets. For example, put dbt models after the Fivetran-ingested table that they read from, or put a machine learning after the dbt models that it's trained from.\n\n### Installation\n\n```bash\npip install dagster-dbt\n```\n\n### Example\n\n\n```python\nfrom pathlib import Path\n\nfrom dagster_dbt import (\n    DbtCliResource,\n    DbtProject,\n    build_schedule_from_dbt_selection,\n    dbt_assets,\n)\n\nimport dagster as dg\n\nRELATIVE_PATH_TO_MY_DBT_PROJECT = \"./my_dbt_project\"\n\nmy_project = DbtProject(\n    project_dir=Path(__file__)\n    .joinpath(\"..\", RELATIVE_PATH_TO_MY_DBT_PROJECT)\n    .resolve(),\n)\nmy_project.prepare_if_dev()\n\n\n@dbt_assets(manifest=my_project.manifest_path)\ndef my_dbt_assets(context: dg.AssetExecutionContext, dbt: DbtCliResource):\n    yield from dbt.cli([\"build\"], context=context).stream()\n\n\nmy_schedule = build_schedule_from_dbt_selection(\n    [my_dbt_assets],\n    job_name=\"materialize_dbt_models\",\n    cron_schedule=\"0 0 * * *\",\n    dbt_select=\"fqn:*\",\n)\n\ndefs = dg.Definitions(\n    assets=[my_dbt_assets],\n    schedules=[my_schedule],\n    resources={\n        \"dbt\": DbtCliResource(project_dir=my_project),\n    },\n)\n```\n        \n\n### About dbt\n\n**dbt** is a SQL-first transformation workflow that lets teams quickly and collaboratively deploy analytics code following software engineering best practices like modularity, portability, CI/CD, and documentation.\n\n<aside className=\"rounded-lg\">\n\nAre you looking to learn more on running Dagster with dbt? Explore the [Dagster University dbt course](https://courses.dagster.io/courses/dagster-dbt).\n\n</aside>"
}
