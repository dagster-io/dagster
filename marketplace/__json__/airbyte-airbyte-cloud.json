{
  "frontmatter": {
    "id": "airbyte-airbyte-cloud",
    "status": "published",
    "name": "Airbyte Cloud",
    "title": "Using Dagster with Airbyte Cloud",
    "excerpt": "Orchestrate Airbyte Cloud connections and schedule syncs alongside upstream or downstream dependencies.",
    "logoFilename": "airbyte.svg",
    "partnerlink": "https://airbyte.com/tutorials/orchestrate-data-ingestion-and-transformation-pipelines",
    "categories": ["ETL"],
    "enabledBy": [],
    "enables": [],
    "tags": ["dagster-supported", "etl"]
  },
  "content": "import Beta from '@site/docs/partials/\\_Beta.md';\n\n<Beta />\n\nThis guide provides instructions for using Dagster with Airbyte Cloud using the `dagster-airbyte` library. Your Airbyte Cloud connection tables can be represented as assets in the Dagster asset graph, allowing you to track lineage and dependencies between Airbyte Cloud assets and data assets you are already modeling in Dagster. You can also use Dagster to orchestrate Airbyte Cloud connections, allowing you to trigger syncs for these on a cadence or based on upstream data changes.\n\n## What you'll learn\n\n- How to represent Airbyte Cloud assets in the Dagster asset graph, including lineage to other Dagster assets.\n- How to customize asset definition metadata for these Airbyte Cloud assets.\n- How to materialize Airbyte Cloud connection tables from Dagster.\n- How to customize how Airbyte Cloud connection tables are materialized.\n\n<details>\n  <summary>Prerequisites</summary>\n\n- The `dagster` and `dagster-airbyte` libraries installed in your environment\n- Familiarity with asset definitions and the Dagster asset graph\n- Familiarity with Dagster resources\n- Familiarity with Airbyte Cloud concepts, like connections and connection tables\n- An Airbyte Cloud workspace\n- An Airbyte Cloud client ID and client secret. For more information, see [Configuring API Access](https://docs.airbyte.com/using-airbyte/configuring-api-access) in the Airbyte Cloud REST API documentation.\n\n</details>\n\n## Set up your environment\n\nTo get started, you'll need to install the `dagster` and `dagster-airbyte` Python packages:\n\n```bash\npip install dagster dagster-airbyte\n```\n\n## Represent Airbyte Cloud assets in the asset graph\n\nTo load Airbyte Cloud assets into the Dagster asset graph, you must first construct a <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"AirbyteCloudWorkspace\" /> resource, which allows Dagster to communicate with your Airbyte Cloud workspace. You'll need to supply your workspace ID, client ID and client secret. See [Configuring API Access](https://docs.airbyte.com/using-airbyte/configuring-api-access) in the Airbyte Cloud REST API documentation for more information on how to create your client ID and client secret.\n\nDagster can automatically load all connection tables from your Airbyte Cloud workspace as asset specs. Call the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"load_airbyte_cloud_asset_specs\" /> function, which returns list of <PyObject section=\"assets\" object=\"AssetSpec\" />s representing your Airbyte Cloud assets. You can then include these asset specs in your <PyObject section=\"definitions\" module=\"dagster\" object=\"Definitions\" /> object:\n\n\n```python\nfrom dagster_airbyte import AirbyteCloudWorkspace, load_airbyte_cloud_asset_specs\n\nimport dagster as dg\n\nairbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_SECRET\"),\n)\n\n\nairbyte_cloud_specs = load_airbyte_cloud_asset_specs(airbyte_workspace)\ndefs = dg.Definitions(assets=airbyte_cloud_specs)\n```\n        \n\n### Sync and materialize Airbyte Cloud assets\n\nYou can use Dagster to sync Airbyte Cloud connections and materialize Airbyte Cloud connection tables. You can use the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"build_airbyte_assets_definitions\" /> factory to create all assets definitions for your Airbyte Cloud workspace.\n\n\n```python\nfrom dagster_airbyte import AirbyteCloudWorkspace, build_airbyte_assets_definitions\n\nimport dagster as dg\n\nairbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_SECRET\"),\n)\n\nall_airbyte_assets = build_airbyte_assets_definitions(workspace=airbyte_workspace)\n\ndefs = dg.Definitions(\n    assets=all_airbyte_assets,\n    resources={\"airbyte\": airbyte_workspace},\n)\n```\n        \n\n### Customize the materialization of Airbyte Cloud assets\n\nIf you want to customize the sync of your connections, you can use the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"airbyte_assets\" /> decorator to do so. This allows you to execute custom code before and after the call to the Airbyte Cloud sync.\n\n\n```python\nfrom dagster_airbyte import AirbyteCloudWorkspace, airbyte_assets\n\nimport dagster as dg\n\nairbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_SECRET\"),\n)\n\n\n@airbyte_assets(\n    connection_id=\"airbyte_connection_id\",  # Replace with your connection ID\n    workspace=airbyte_workspace,\n    name=\"airbyte_connection_name\",  # Replace with your connection name\n    group_name=\"airbyte_connection_name\",\n)\ndef airbyte_connection_assets(\n    context: dg.AssetExecutionContext, airbyte: AirbyteCloudWorkspace\n):\n    # Do something before the materialization...\n    yield from airbyte.sync_and_poll(context=context)\n    # Do something after the materialization...\n\n\ndefs = dg.Definitions(\n    assets=[airbyte_connection_assets],\n    resources={\"airbyte\": airbyte_workspace},\n)\n```\n        \n\n### Customize asset definition metadata for Airbyte Cloud assets\n\nBy default, Dagster will generate asset specs for each Airbyte Cloud asset and populate default metadata. You can further customize asset properties by passing an instance of the custom <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"DagsterAirbyteTranslator\" /> to the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"load_airbyte_cloud_asset_specs\" /> function.\n\n\n```python\nfrom dagster_airbyte import (\n    AirbyteCloudWorkspace,\n    AirbyteConnectionTableProps,\n    DagsterAirbyteTranslator,\n    load_airbyte_cloud_asset_specs,\n)\n\nimport dagster as dg\n\nairbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_CLIENT_SECRET\"),\n)\n\n\n# A translator class lets us customize properties of the built\n# Airbyte Cloud assets, such as the owners or asset key\nclass MyCustomAirbyteTranslator(DagsterAirbyteTranslator):\n    def get_asset_spec(self, props: AirbyteConnectionTableProps) -> dg.AssetSpec:\n        # We create the default asset spec using super()\n        default_spec = super().get_asset_spec(props)\n        # We customize the metadata and asset key prefix for all assets\n        return default_spec.replace_attributes(\n            key=default_spec.key.with_prefix(\"prefix\"),\n        ).merge_attributes(metadata={\"custom\": \"metadata\"})\n\n\nairbyte_cloud_specs = load_airbyte_cloud_asset_specs(\n    airbyte_workspace, dagster_airbyte_translator=MyCustomAirbyteTranslator()\n)\n\ndefs = dg.Definitions(assets=airbyte_cloud_specs)\n```\n        \n\nNote that `super()` is called in each of the overridden methods to generate the default asset spec. It is best practice to generate the default asset spec before customizing it.\n\nYou can pass an instance of the custom <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"DagsterAirbyteTranslator\" /> to the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"airbyte_assets\" /> decorator or the <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"build_airbyte_assets_definitions\" /> factory.\n\n### Load Airbyte Cloud assets from multiple workspaces\n\nDefinitions from multiple Airbyte Cloud workspaces can be combined by instantiating multiple <PyObject section=\"libraries\" module=\"dagster_airbyte\" object=\"AirbyteCloudWorkspace\" /> resources and merging their specs. This lets you view all your Airbyte Cloud assets in a single asset graph:\n\n\n```python\nfrom dagster_airbyte import AirbyteCloudWorkspace, load_airbyte_cloud_asset_specs\n\nimport dagster as dg\n\nsales_airbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_SALES_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_SALES_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_SALES_CLIENT_SECRET\"),\n)\n\nmarketing_airbyte_workspace = AirbyteCloudWorkspace(\n    workspace_id=dg.EnvVar(\"AIRBYTE_CLOUD_MARKETING_WORKSPACE_ID\"),\n    client_id=dg.EnvVar(\"AIRBYTE_CLOUD_MARKETING_CLIENT_ID\"),\n    client_secret=dg.EnvVar(\"AIRBYTE_CLOUD_MARKETING_CLIENT_SECRET\"),\n)\n\nsales_airbyte_cloud_specs = load_airbyte_cloud_asset_specs(\n    workspace=sales_airbyte_workspace\n)\nmarketing_airbyte_cloud_specs = load_airbyte_cloud_asset_specs(\n    workspace=marketing_airbyte_workspace\n)\n\n# Merge the specs into a single set of definitions\ndefs = dg.Definitions(\n    assets=[*sales_airbyte_cloud_specs, *marketing_airbyte_cloud_specs],\n)\n```\n        "
}
